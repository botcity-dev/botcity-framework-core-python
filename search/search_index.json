{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Welcome to BotCity's Framework Core Python package for RPA. Installation Latest release Using PyPI pip install botcity-framework-core Using conda-forge - Coming Soon conda install -c conda-forge botcity-framework-core Latest code pip install git + https : // github . com / botcity - dev / botcity - framework - core - python . git Important - Linux For Linux it may be necessary to install the Python 3 Tk library as well as scrot (Screenshot tool). apt install python3-tk apt install scrot apt install xclip","title":"Home"},{"location":"#welcome","text":"Welcome to BotCity's Framework Core Python package for RPA.","title":"Welcome"},{"location":"#installation","text":"","title":"Installation"},{"location":"#latest-release","text":"","title":"Latest release"},{"location":"#using-pypi","text":"pip install botcity-framework-core","title":"Using PyPI"},{"location":"#using-conda-forge-coming-soon","text":"conda install -c conda-forge botcity-framework-core","title":"Using conda-forge - Coming Soon"},{"location":"#latest-code","text":"pip install git + https : // github . com / botcity - dev / botcity - framework - core - python . git","title":"Latest code"},{"location":"#important-linux","text":"For Linux it may be necessary to install the Python 3 Tk library as well as scrot (Screenshot tool). apt install python3-tk apt install scrot apt install xclip","title":"Important - Linux"},{"location":"bot/","text":"Framework The botcity.core module contains specialized implementations aimed at Desktop automation such as DesktopBot which is described below. You are expected to implement the action method of the DesktopBot class in your Bot class. Here is a very brief example of a bot which opens the BotCity website: from botcity.core import DesktopBot class Bot ( DesktopBot ): def action ( self , execution = None ): # Opens the BotCity website. self . browse ( \"https://botcity.dev\" ) if __name__ == '__main__' : Bot . main () botcity.core.bot.DesktopBot Bases: BaseBot Base class for Desktop Bots. Users must implement the action method in their classes. Attributes: Name Type Description state State The internal state of this bot. maestro BotMaestroSDK an instance to interact with the BotMaestro server. Source code in botcity/core/bot.pyclass DesktopBot ( BaseBot ): \"\"\" Base class for Desktop Bots. Users must implement the `action` method in their classes. Attributes: state (State): The internal state of this bot. maestro (BotMaestroSDK): an instance to interact with the BotMaestro server. \"\"\" def __init__ ( self ): super () . __init__ () self . _app = None self . state = State () self . maestro = BotMaestroSDK () if MAESTRO_AVAILABLE else None self . _interval = 0.005 if platform . system () == \"Darwin\" else 0.0 # For parity with Java self . addImage = self . add_image self . getImageFromMap = self . get_image_from_map self . getLastElement = self . get_last_element self . getScreenShot = self . get_screenshot self . screenCut = self . screen_cut self . saveScreenshot = self . save_screenshot self . getCoordinates = self . get_element_coords self . getElementCoords = self . get_element_coords self . getElementCoordsCentered = self . get_element_coords_centered self . find = self . find_until self . findUntil = self . find_until self . findText = self . find_text self . findLastUntil = self . find_until # Java API compatibility self . clickOn = self . click_on self . getLastX = self . get_last_x self . getLastY = self . get_last_y self . mouseMove = self . mouse_move self . clickAt = self . click_at self . doubleclick = self . double_click self . doubleClick = self . double_click self . doubleClickRelative = self . double_click_relative self . tripleClick = self . triple_click self . tripleClickRelative = self . triple_click_relative self . scrollDown = self . scroll_down self . scrollUp = self . scroll_up self . moveTo = self . mouse_move self . moveRelative = self . move_relative self . moveRandom = self . move_random self . moveAndClick = self . click self . rightClick = self . right_click self . rightClickAt = self . right_click_at self . rightClickRelative = self . right_click_relative self . moveAndRightClick = self . right_click pyperclip . determine_clipboard () @property def app ( self ): \"\"\" The connected application instance to be used. Returns: app (Application): The connected Application instance. \"\"\" return self . _app @app . setter def app ( self , app ): \"\"\" The connected application instance to be used. Args: app (Application): The connected application to be used. \"\"\" self . _app = app ########## # Display ########## def add_image ( self , label , path ): \"\"\" Add an image into the state image map. Args: label (str): The image identifier path (str): The path for the image on disk \"\"\" self . state . map_images [ label ] = path def get_image_from_map ( self , label ): \"\"\" Return an image from teh state image map. Args: label (str): The image identifier Returns: Image: The Image object \"\"\" path = self . state . map_images . get ( label ) if not path : raise KeyError ( 'Invalid label for image map.' ) img = Image . open ( path ) return img def find_multiple ( self , labels , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ): \"\"\" Find multiple elements defined by label on screen until a timeout happens. Args: labels (list): A list of image identifiers x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: results (dict): A dictionary in which the key is the label and value are the element coordinates in a NamedTuple. \"\"\" def _to_dict ( lbs , elems ): return { k : v for k , v in zip ( lbs , elems )} screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) results = [ None ] * len ( labels ) paths = [ self . _search_image_file ( la ) for la in labels ] paths = [ self . _image_path_as_image ( la ) for la in paths ] if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) if not best : # TODO: Implement best=False. print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) start_time = time . time () n_cpus = multiprocessing . cpu_count () - 1 while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return _to_dict ( labels , results ) haystack = pyautogui . screenshot () helper = functools . partial ( self . _find_multiple_helper , haystack , region , matching , grayscale ) with multiprocessing . Pool ( processes = n_cpus ) as pool : results = pool . map ( helper , paths ) results = [ self . _fix_retina_element ( r ) for r in results ] if None in results : continue else : return _to_dict ( labels , results ) def _fix_retina_element ( self , ele ): if not is_retina (): return ele if ele is not None : if is_retina (): ele = ele . _replace ( left = ele . left / 2.0 , top = ele . top / 2.0 , width = ele . width / 2.0 , height = ele . height / 2.0 ) return ele def _fix_display_size ( self ): width , height = pyautogui . size () if not is_retina (): return width , height return int ( width * 2 ), int ( height * 2 ) def _find_multiple_helper ( self , haystack , region , confidence , grayscale , needle ): ele = cv2find . locate_all_opencv ( needle , haystack , region = region , confidence = confidence , grayscale = grayscale ) return ele def find ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" return self . find_until ( label , x = x , y = y , width = width , height = height , threshold = threshold , matching = matching , waiting_time = waiting_time , best = best , grayscale = grayscale ) def find_until ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" self . state . element = None screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) element_path = self . _search_image_file ( label ) element_path = self . _image_path_as_image ( element_path ) if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) if not best : # TODO: Implement best=False. print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) start_time = time . time () while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return None haystack = self . get_screenshot () it = cv2find . locate_all_opencv ( element_path , haystack_image = haystack , region = region , confidence = matching , grayscale = grayscale ) try : ele = next ( it ) except StopIteration : ele = None if ele is not None : ele = self . _fix_retina_element ( ele ) self . state . element = ele return ele def find_all ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , grayscale = False ): \"\"\" Find all elements defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: elements (collections.Iterable[NamedTuple]): A generator with all element coordinates fount. None if not found. \"\"\" def deduplicate ( elems ): def find_same ( item , items ): x_start = item . left x_end = item . left + item . width y_start = item . top y_end = item . top + item . height similars = [] for itm in items : if itm == item : continue if ( itm . left >= x_start and itm . left < x_end ) \\ and ( itm . top >= y_start and itm . top < y_end ): similars . append ( itm ) continue return similars index = 0 while True : try : dups = find_same ( elems [ index ], elems [ index :]) for d in dups : elems . remove ( d ) index += 1 except IndexError : break return elems self . state . element = None screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) element_path = self . _search_image_file ( label ) element_path = self . _image_path_as_image ( element_path ) if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) start_time = time . time () while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return None haystack = self . get_screenshot () eles = cv2find . locate_all_opencv ( element_path , haystack_image = haystack , region = region , confidence = matching , grayscale = grayscale ) if not eles : continue eles = deduplicate ( list ( eles )) for ele in eles : if ele is not None : ele = self . _fix_retina_element ( ele ) self . state . element = ele yield ele break def find_text ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" return self . find_until ( label , x , y , width , height , threshold = threshold , matching = matching , waiting_time = waiting_time , best = best , grayscale = True ) def get_last_element ( self ): \"\"\" Return the last element found. Returns: element (NamedTuple): The element coordinates (left, top, width, height) \"\"\" return self . state . element def display_size ( self ): \"\"\" Returns the display size in pixels. Returns: size (Tuple): The screen dimension (width and height) in pixels. \"\"\" width , height = self . _fix_display_size () return width , height def screenshot ( self , filepath = None , region = None ): \"\"\" Capture a screenshot. Args: filepath (str, optional): The filepath in which to save the screenshot. Defaults to None. region (tuple, optional): Bounding box containing left, top, width and height to crop screenshot. Returns: Image: The screenshot Image object \"\"\" img = pyautogui . screenshot ( filepath , region ) return img def get_screenshot ( self , filepath = None , region = None ): \"\"\" Capture a screenshot. Args: filepath (str, optional): The filepath in which to save the screenshot. Defaults to None. region (tuple, optional): Bounding box containing left, top, width and height to crop screenshot. Returns: Image: The screenshot Image object \"\"\" return self . screenshot ( filepath , region ) def screen_cut ( self , x , y , width = None , height = None ): \"\"\" Capture a screenshot from a region of the screen. Args: x (int): region start position x y (int): region start position y width (int): region width height (int): region height Returns: Image: The screenshot Image object \"\"\" screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 width = width or screen_w height = height or screen_h img = pyautogui . screenshot ( region = ( x , y , width , height )) return img def save_screenshot ( self , path ): \"\"\" Saves a screenshot in a given path. Args: path (str): The filepath in which to save the screenshot \"\"\" pyautogui . screenshot ( path ) def get_element_coords ( self , label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True ): \"\"\" Find an element defined by label on screen and returns its coordinates. Args: label (str): The image identifier x (int, optional): X (Left) coordinate of the search area. y (int, optional): Y (Top) coordinate of the search area. width (int, optional): Width of the search area. height (int, optional): Height of the search area. matching (float, optional): Minimum score to consider a match in the element image recognition process. Defaults to 0.9. best (bool, optional): Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. Returns: coords (Tuple): A tuple containing the x and y coordinates for the element. \"\"\" self . state . element = None screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 width = width or screen_w height = height or screen_h region = ( x , y , width , height ) if not best : print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) element_path = self . _search_image_file ( label ) element_path = self . _image_path_as_image ( element_path ) haystack = self . get_screenshot () it = cv2find . locate_all_opencv ( element_path , haystack_image = haystack , region = region , confidence = matching , grayscale = False ) try : ele = next ( it ) except StopIteration : ele = None if ele is None : return None , None ele = self . _fix_retina_element ( ele ) self . state . element = ele return ele . left , ele . top def get_element_coords_centered ( self , label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True ): \"\"\" Find an element defined by label on screen and returns its centered coordinates. Args: label (str): The image identifier x (int, optional): X (Left) coordinate of the search area. y (int, optional): Y (Top) coordinate of the search area. width (int, optional): Width of the search area. height (int, optional): Height of the search area. matching (float, optional): Minimum score to consider a match in the element image recognition process. Defaults to 0.9. best (bool, optional): Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. Returns: coords (Tuple): A tuple containing the x and y coordinates for the center of the element. \"\"\" self . get_element_coords ( label , x , y , width , height , matching , best ) return self . state . center () ######### # Browser ######### def browse ( self , url , location = 0 ): \"\"\" Invoke the default browser passing an URL Args: url (str): The URL to be visited. location (int): If possible, open url in a location determined by new: * 0: the same browser window (the default) * 1: a new browser window * 2: a new browser page (\"tab\") Returns: bool: Whether or not the request was successful \"\"\" status = webbrowser . open ( url , location ) return status ####### # Mouse ####### def click_on ( self , label ): \"\"\" Click on the element. Args: label (str): The image identifier \"\"\" x , y = self . get_element_coords_centered ( label ) if None in ( x , y ): raise ValueError ( f 'Element not available. Cannot find { label } .' ) os_compat . click ( x , y ) def get_last_x ( self ): \"\"\" Get the last X position for the mouse. Returns: x (int): The last x position for the mouse. \"\"\" return pyautogui . position () . x def get_last_y ( self ): \"\"\" Get the last Y position for the mouse. Returns: y (int): The last y position for the mouse. \"\"\" return pyautogui . position () . y def mouse_move ( self , x , y ): \"\"\" Mouse the move to the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" pyautogui . moveTo ( x , y ) def click_at ( self , x , y ): \"\"\" Click at the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" os_compat . click ( x , y ) @only_if_element def click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ): \"\"\" Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" x , y = self . state . center () os_compat . click ( x , y , clicks = clicks , button = button , interval = interval_between_clicks / 1000.0 ) self . sleep ( wait_after ) @only_if_element def click_relative ( self , x , y , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ): \"\"\" Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" x = self . state . x () + x y = self . state . y () + y os_compat . click ( x , y , clicks = clicks , button = button , interval = interval_between_clicks / 1000.0 ) self . sleep ( wait_after ) @only_if_element def double_click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Double Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click ( wait_after = wait_after , clicks = 2 ) @only_if_element def double_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Double Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click_relative ( x , y , wait_after = wait_after , clicks = 2 , interval_between_clicks = interval_between_clicks ) @only_if_element def triple_click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Triple Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click ( wait_after = wait_after , clicks = 3 ) @only_if_element def triple_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Triple Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click_relative ( x , y , wait_after = wait_after , clicks = 3 , interval_between_clicks = interval_between_clicks ) def mouse_down ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , button = 'left' ): \"\"\" Holds down the requested mouse button. Args: wait_after (int, optional): Interval to wait after clicking on the element. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" pyautogui . mouseDown ( button = button ) self . sleep ( wait_after ) def mouse_up ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , button = 'left' ): \"\"\" Releases the requested mouse button. Args: wait_after (int, optional): Interval to wait after clicking on the element. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" pyautogui . mouseUp ( button = button ) self . sleep ( wait_after ) def scroll_down ( self , clicks ): \"\"\" Scroll Down n clicks Args: clicks (int): Number of times to scroll down. \"\"\" pyautogui . scroll ( - 1 * clicks ) def scroll_up ( self , clicks ): \"\"\" Scroll Up n clicks Args: clicks (int): Number of times to scroll up. \"\"\" pyautogui . scroll ( clicks ) @only_if_element def move ( self ): \"\"\" Move to the center position of last found item. \"\"\" x , y = self . state . center () pyautogui . moveTo ( x , y ) def move_relative ( self , x , y ): \"\"\" Move the mouse relative to its current position. Args: x (int): Horizontal offset y (int): Vertical offset \"\"\" x = self . get_last_x () + x y = self . get_last_y () + y pyautogui . moveTo ( x , y ) def move_random ( self , range_x , range_y ): \"\"\" Move randomly along the given x, y range. Args: range_x (int): Horizontal range range_y (int): Vertical range \"\"\" x = int ( random . random () * range_x ) y = int ( random . random () * range_y ) pyautogui . moveTo ( x , y ) @only_if_element def right_click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 ): \"\"\" Right click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. \"\"\" x , y = self . state . center () os_compat . click ( x , y , clicks = clicks , button = 'right' , interval = interval_between_clicks / 1000.0 ) self . sleep ( wait_after ) def right_click_at ( self , x , y ): \"\"\" Right click at the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" os_compat . click ( x , y , button = 'right' ) @only_if_element def right_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Right Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click_relative ( x , y , wait_after = wait_after , clicks = 3 , interval_between_clicks = interval_between_clicks , button = 'right' ) ########## # Keyboard ########## def type_key ( self , text , interval = 0 ): \"\"\" Type a text char by char (individual key events). Args: text (str): text to be typed. interval (int, optional): interval (ms) between each key press. Defaults to 0 \"\"\" self . kb_type ( text = text , interval = interval / 1000.0 ) def kb_type ( self , text , interval = 0 ): \"\"\" Type a text char by char (individual key events). Args: text (str): text to be typed. interval (int, optional): interval (ms) between each key press. Defaults to 0 \"\"\" pyautogui . write ( text , interval = interval / 1000.0 ) self . sleep ( config . DEFAULT_SLEEP_AFTER_ACTION ) def paste ( self , text = None , wait = 0 ): \"\"\" Paste content from the clipboard. Args: text (str, optional): The text to be pasted. Defaults to None wait (int, optional): Wait interval (ms) after task \"\"\" if text : pyperclip . copy ( text ) self . control_v () def copy_to_clipboard ( self , text , wait = 0 ): \"\"\" Copy content to the clipboard. Args: text (str): The text to be copied. wait (int, optional): Wait interval (ms) after task \"\"\" pyperclip . copy ( text ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def tab ( self , wait = 0 ): \"\"\" Press key Tab Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'tab' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def enter ( self , wait = 0 ): \"\"\" Press key Enter Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'enter' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def key_right ( self , wait = 0 ): \"\"\" Press key Right Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'right' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def key_enter ( self , wait = 0 ): \"\"\" Press key Enter Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . enter ( wait ) def key_end ( self , wait = 0 ): \"\"\" Press key End Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'end' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def key_esc ( self , wait = 0 ): \"\"\" Press key Esc Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'esc' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def _key_fx ( self , idx , wait = 0 ): \"\"\" Press key F[idx] where idx is a value from 1 to 12 Args: idx (int): F key index from 1 to 12 wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( f 'f { idx } ' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def key_f1 ( self , wait = 0 ): self . _key_fx ( 1 , wait = wait ) def key_f2 ( self , wait = 0 ): self . _key_fx ( 2 , wait = wait ) def key_f3 ( self , wait = 0 ): self . _key_fx ( 3 , wait = wait ) def key_f4 ( self , wait = 0 ): self . _key_fx ( 4 , wait = wait ) def key_f5 ( self , wait = 0 ): self . _key_fx ( 5 , wait = wait ) def key_f6 ( self , wait = 0 ): self . _key_fx ( 6 , wait = wait ) def key_f7 ( self , wait = 0 ): self . _key_fx ( 7 , wait = wait ) def key_f8 ( self , wait = 0 ): self . _key_fx ( 8 , wait = wait ) def key_f9 ( self , wait = 0 ): self . _key_fx ( 9 , wait = wait ) def key_f10 ( self , wait = 0 ): self . _key_fx ( 10 , wait = wait ) def key_f11 ( self , wait = 0 ): self . _key_fx ( 11 , wait = wait ) def key_f12 ( self , wait = 0 ): self . _key_fx ( 12 , wait = wait ) def hold_shift ( self , wait = 0 ): \"\"\" Hold key Shift Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . keyDown ( 'shift' ) self . sleep ( wait ) def release_shift ( self ): \"\"\" Release key Shift. This method needs to be invoked after holding Shift or similar. \"\"\" pyautogui . keyUp ( 'shift' ) def alt_space ( self , wait = 0 ): \"\"\" Press keys Alt+Space Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'space' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def maximize_window ( self ): \"\"\" Shortcut to maximize window on Windows OS. \"\"\" self . alt_space () self . sleep ( 1000 ) pyautogui . press ( 'x' ) def type_keys_with_interval ( self , interval , keys ): \"\"\" Press a sequence of keys. Hold the keys in the specific order and releases them. Args: interval (int): Interval (ms) in which to press and release keys keys (list): List of keys to be pressed \"\"\" pyautogui . hotkey ( * keys , interval = interval / 1000.0 ) def type_keys ( self , keys ): \"\"\" Press a sequence of keys. Hold the keys in the specific order and releases them. Args: keys (list): List of keys to be pressed \"\"\" self . type_keys_with_interval ( 100 , keys ) def alt_e ( self , wait = 0 ): \"\"\" Press keys Alt+E Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'e' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def alt_r ( self , wait = 0 ): \"\"\" Press keys Alt+R Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'r' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def alt_f ( self , wait = 0 ): \"\"\" Press keys Alt+F Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'f' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def alt_u ( self , wait = 0 ): \"\"\" Press keys Alt+U Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'u' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def alt_f4 ( self , wait = 0 ): \"\"\" Press keys Alt+F4 Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'f4' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_c ( self , wait = 0 ): \"\"\" Press keys CTRL+C Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'c' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) return self . get_clipboard () def control_v ( self , wait = 0 ): \"\"\" Press keys CTRL+V Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'v' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_a ( self , wait = 0 ): \"\"\" Press keys CTRL+A Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'a' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_f ( self , wait = 0 ): \"\"\" Press keys CTRL+F Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'f' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_p ( self , wait = 0 ): \"\"\" Press keys CTRL+P Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'p' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_u ( self , wait = 0 ): \"\"\" Press keys CTRL+U Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'u' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_r ( self , wait = 0 ): \"\"\" Press keys CTRL+R Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'r' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_t ( self , wait = 0 ): \"\"\" Press keys CTRL+T Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 't' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_end ( self , wait = 0 ): \"\"\" Press keys CTRL+End Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'end' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_home ( self , wait = 0 ): \"\"\" Press keys CTRL+Home Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'home' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_w ( self , wait = 0 ): \"\"\" Press keys CTRL+W Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'w' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_shift_p ( self , wait = 0 ): \"\"\" Press keys CTRL+Shift+P Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'shift' , 'p' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_shift_j ( self , wait = 0 ): \"\"\" Press keys CTRL+Shift+J Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'shift' , 'j' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def shift_tab ( self , wait = 0 ): \"\"\" Press keys Shift+Tab Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'shift' , 'tab' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def get_clipboard ( self ): \"\"\" Get the current content in the clipboard. Returns: text (str): Current clipboard content \"\"\" return pyperclip . paste () def type_left ( self , wait = 0 ): \"\"\" Press Left key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'left' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def type_right ( self , wait = 0 ): \"\"\" Press Right key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'right' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def type_down ( self , wait = 0 ): \"\"\" Press Down key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'down' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def type_up ( self , wait = 0 ): \"\"\" Press Up key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'up' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def type_windows ( self , wait = 0 ): \"\"\" Press Win logo key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'win' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def page_up ( self , wait = 0 ): \"\"\" Press Page Up key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'pageup' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def page_down ( self , wait = 0 ): \"\"\" Press Page Down key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'pagedown' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def space ( self , wait = 0 ): \"\"\" Press Space key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'space' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def backspace ( self , wait = 0 ): \"\"\" Press Backspace key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'backspace' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def delete ( self , wait = 0 ): \"\"\" Press Delete key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'delete' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) ###### # Misc ###### def wait_for_file ( self , path , timeout = 10000 ): \"\"\" Invoke the system handler to open the given file. Args: path (str): The path for the file to be executed timeout (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). Returns status (bool): Whether or not the file was available before the timeout \"\"\" start_time = time . time () while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > timeout : return False if os . path . isfile ( path ) and os . access ( path , os . R_OK ): return True self . sleep ( config . DEFAULT_SLEEP_AFTER_ACTION ) def execute ( self , file_path ): \"\"\" Invoke the system handler to open the given file. Args: file_path (str): The path for the file to be executed \"\"\" if platform . system () == \"Windows\" : os . startfile ( file_path ) else : subprocess . Popen ( file_path . split ( \" \" )) def wait ( self , interval ): \"\"\" Wait / Sleep for a given interval. Args: interval (int): Interval in milliseconds \"\"\" time . sleep ( interval / 1000.0 ) def sleep ( self , interval ): \"\"\" Wait / Sleep for a given interval. Args: interval (int): Interval in milliseconds \"\"\" self . wait ( interval ) ############# # Application ############# @if_windows_os def connect_to_app ( self , backend = Backend . WIN_32 , timeout = 60000 , ** connection_selectors ) -> 'Application' : \"\"\" Connects to an instance of an open application. Use this method to be able to access application windows and elements. Args: backend (Backend, optional): The accessibility technology defined in the Backend class that could be used for your application. Defaults to Backend.WIN_32 ('win32'). timeout (int, optional): Maximum wait time (ms) to wait for connection. Defaults to 60000ms (60s). **connection_selectors: Attributes that can be used to connect to an application. [See more details about the available selectors](https://documentation.botcity.dev). Returns app (Application): The Application instance. \"\"\" self . app = connect ( backend , timeout , ** connection_selectors ) return self . app @if_app_connected def find_app_window ( self , waiting_time = 10000 , ** selectors ) -> 'WindowSpecification' : \"\"\" Find a window of the currently connected application using the available selectors. Args: waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). **selectors: Attributes that can be used to filter an element. [See more details about the available selectors](https://documentation.botcity.dev). Returns dialog (WindowSpecification): The window or control found. \"\"\" dialog = find_window ( self . app , waiting_time , ** selectors ) return dialog @if_app_connected def find_app_element ( self , from_parent_window : 'WindowSpecification' = None , waiting_time = 10000 , ** selectors ) -> 'WindowSpecification' : \"\"\" Find a element of the currently connected application using the available selectors. You can pass the context window where the element is contained. Args: from_parent_window (WindowSpecification, optional): The element's parent window. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). **selectors: Attributes that can be used to filter an element. [See more details about the available selectors](https://documentation.botcity.dev). Returns element (WindowSpecification): The element/control found. \"\"\" element = find_element ( self . app , from_parent_window , waiting_time , ** selectors ) return element add_image ( label , path ) Add an image into the state image map. Parameters: Name Type Description Default label str The image identifier required path str The path for the image on disk required Source code in botcity/core/bot.py 112 113 114 115 116 117 118 119 120 def add_image ( self , label , path ): \"\"\" Add an image into the state image map. Args: label (str): The image identifier path (str): The path for the image on disk \"\"\" self . state . map_images [ label ] = path alt_e ( wait = 0 ) Press keys Alt+E Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 def alt_e ( self , wait = 0 ): \"\"\" Press keys Alt+E Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'e' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) alt_f ( wait = 0 ) Press keys Alt+F Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 def alt_f ( self , wait = 0 ): \"\"\" Press keys Alt+F Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'f' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) alt_f4 ( wait = 0 ) Press keys Alt+F4 Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 def alt_f4 ( self , wait = 0 ): \"\"\" Press keys Alt+F4 Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'f4' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) alt_r ( wait = 0 ) Press keys Alt+R Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 def alt_r ( self , wait = 0 ): \"\"\" Press keys Alt+R Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'r' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) alt_space ( wait = 0 ) Press keys Alt+Space Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 def alt_space ( self , wait = 0 ): \"\"\" Press keys Alt+Space Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'space' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) alt_u ( wait = 0 ) Press keys Alt+U Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 def alt_u ( self , wait = 0 ): \"\"\" Press keys Alt+U Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'u' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) app () property writable The connected application instance to be used. Returns: Name Type Description app Application The connected Application instance. Source code in botcity/core/bot.py 88 89 90 91 92 93 94 95 96 @property def app ( self ): \"\"\" The connected application instance to be used. Returns: app (Application): The connected Application instance. \"\"\" return self . _app backspace ( wait = 0 ) Press Backspace key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 def backspace ( self , wait = 0 ): \"\"\" Press Backspace key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'backspace' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) browse ( url , location = 0 ) Invoke the default browser passing an URL Parameters: Name Type Description Default url str The URL to be visited. required location int If possible, open url in a location determined by new: * 0: the same browser window (the default) * 1: a new browser window * 2: a new browser page (\"tab\") 0 Returns: Name Type Description bool Whether or not the request was successful Source code in botcity/core/bot.py 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 def browse ( self , url , location = 0 ): \"\"\" Invoke the default browser passing an URL Args: url (str): The URL to be visited. location (int): If possible, open url in a location determined by new: * 0: the same browser window (the default) * 1: a new browser window * 2: a new browser page (\"tab\") Returns: bool: Whether or not the request was successful \"\"\" status = webbrowser . open ( url , location ) return status click ( wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ) Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 button str One of 'left', 'right', 'middle'. Defaults to 'left' 'left' Source code in botcity/core/bot.py 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 @only_if_element def click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ): \"\"\" Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" x , y = self . state . center () os_compat . click ( x , y , clicks = clicks , button = button , interval = interval_between_clicks / 1000.0 ) self . sleep ( wait_after ) click_at ( x , y ) Click at the coordinate defined by x and y Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required Source code in botcity/core/bot.py 648 649 650 651 652 653 654 655 656 def click_at ( self , x , y ): \"\"\" Click at the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" os_compat . click ( x , y ) click_on ( label ) Click on the element. Parameters: Name Type Description Default label str The image identifier required Source code in botcity/core/bot.py 607 608 609 610 611 612 613 614 615 616 617 def click_on ( self , label ): \"\"\" Click on the element. Args: label (str): The image identifier \"\"\" x , y = self . get_element_coords_centered ( label ) if None in ( x , y ): raise ValueError ( f 'Element not available. Cannot find { label } .' ) os_compat . click ( x , y ) click_relative ( x , y , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ) Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 button str One of 'left', 'right', 'middle'. Defaults to 'left' 'left' Source code in botcity/core/bot.py 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 @only_if_element def click_relative ( self , x , y , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ): \"\"\" Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" x = self . state . x () + x y = self . state . y () + y os_compat . click ( x , y , clicks = clicks , button = button , interval = interval_between_clicks / 1000.0 ) self . sleep ( wait_after ) connect_to_app ( backend = Backend . WIN_32 , timeout = 60000 , ** connection_selectors ) Connects to an instance of an open application. Use this method to be able to access application windows and elements. Parameters: Name Type Description Default backend Backend The accessibility technology defined in the Backend class that could be used for your application. Defaults to Backend.WIN_32 ('win32'). Backend.WIN_32 timeout int Maximum wait time (ms) to wait for connection. Defaults to 60000ms (60s). 60000 **connection_selectors Attributes that can be used to connect to an application. See more details about the available selectors . {} Returns app (Application): The Application instance. Source code in botcity/core/bot.py 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 @if_windows_os def connect_to_app ( self , backend = Backend . WIN_32 , timeout = 60000 , ** connection_selectors ) -> 'Application' : \"\"\" Connects to an instance of an open application. Use this method to be able to access application windows and elements. Args: backend (Backend, optional): The accessibility technology defined in the Backend class that could be used for your application. Defaults to Backend.WIN_32 ('win32'). timeout (int, optional): Maximum wait time (ms) to wait for connection. Defaults to 60000ms (60s). **connection_selectors: Attributes that can be used to connect to an application. [See more details about the available selectors](https://documentation.botcity.dev). Returns app (Application): The Application instance. \"\"\" self . app = connect ( backend , timeout , ** connection_selectors ) return self . app control_a ( wait = 0 ) Press keys CTRL+A Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 def control_a ( self , wait = 0 ): \"\"\" Press keys CTRL+A Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'a' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) control_c ( wait = 0 ) Press keys CTRL+C Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 def control_c ( self , wait = 0 ): \"\"\" Press keys CTRL+C Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'c' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) return self . get_clipboard () control_end ( wait = 0 ) Press keys CTRL+End Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 def control_end ( self , wait = 0 ): \"\"\" Press keys CTRL+End Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'end' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) control_f ( wait = 0 ) Press keys CTRL+F Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 def control_f ( self , wait = 0 ): \"\"\" Press keys CTRL+F Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'f' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) control_home ( wait = 0 ) Press keys CTRL+Home Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 def control_home ( self , wait = 0 ): \"\"\" Press keys CTRL+Home Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'home' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) control_p ( wait = 0 ) Press keys CTRL+P Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 def control_p ( self , wait = 0 ): \"\"\" Press keys CTRL+P Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'p' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) control_r ( wait = 0 ) Press keys CTRL+R Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 def control_r ( self , wait = 0 ): \"\"\" Press keys CTRL+R Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'r' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) control_shift_j ( wait = 0 ) Press keys CTRL+Shift+J Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 def control_shift_j ( self , wait = 0 ): \"\"\" Press keys CTRL+Shift+J Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'shift' , 'j' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) control_shift_p ( wait = 0 ) Press keys CTRL+Shift+P Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 def control_shift_p ( self , wait = 0 ): \"\"\" Press keys CTRL+Shift+P Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'shift' , 'p' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) control_t ( wait = 0 ) Press keys CTRL+T Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 def control_t ( self , wait = 0 ): \"\"\" Press keys CTRL+T Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 't' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) control_u ( wait = 0 ) Press keys CTRL+U Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 def control_u ( self , wait = 0 ): \"\"\" Press keys CTRL+U Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'u' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) control_v ( wait = 0 ) Press keys CTRL+V Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 def control_v ( self , wait = 0 ): \"\"\" Press keys CTRL+V Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'v' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) control_w ( wait = 0 ) Press keys CTRL+W Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 def control_w ( self , wait = 0 ): \"\"\" Press keys CTRL+W Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'w' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) copy_to_clipboard ( text , wait = 0 ) Copy content to the clipboard. Parameters: Name Type Description Default text str The text to be copied. required wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 893 894 895 896 897 898 899 900 901 902 903 def copy_to_clipboard ( self , text , wait = 0 ): \"\"\" Copy content to the clipboard. Args: text (str): The text to be copied. wait (int, optional): Wait interval (ms) after task \"\"\" pyperclip . copy ( text ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) delete ( wait = 0 ) Press Delete key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 def delete ( self , wait = 0 ): \"\"\" Press Delete key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'delete' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) display_size () Returns the display size in pixels. Returns: Name Type Description size Tuple The screen dimension (width and height) in pixels. Source code in botcity/core/bot.py 446 447 448 449 450 451 452 453 454 def display_size ( self ): \"\"\" Returns the display size in pixels. Returns: size (Tuple): The screen dimension (width and height) in pixels. \"\"\" width , height = self . _fix_display_size () return width , height double_click ( wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ) Double Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION Source code in botcity/core/bot.py 693 694 695 696 697 698 699 700 701 @only_if_element def double_click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Double Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click ( wait_after = wait_after , clicks = 2 ) double_click_relative ( x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ) Double Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION Source code in botcity/core/bot.py 703 704 705 706 707 708 709 710 711 712 713 714 715 @only_if_element def double_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Double Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click_relative ( x , y , wait_after = wait_after , clicks = 2 , interval_between_clicks = interval_between_clicks ) enter ( wait = 0 ) Press key Enter Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 917 918 919 920 921 922 923 924 925 926 927 def enter ( self , wait = 0 ): \"\"\" Press key Enter Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'enter' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) execute ( file_path ) Invoke the system handler to open the given file. Parameters: Name Type Description Default file_path str The path for the file to be executed required Source code in botcity/core/bot.py 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 def execute ( self , file_path ): \"\"\" Invoke the system handler to open the given file. Args: file_path (str): The path for the file to be executed \"\"\" if platform . system () == \"Windows\" : os . startfile ( file_path ) else : subprocess . Popen ( file_path . split ( \" \" )) find ( label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ) Find an element defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False Returns: Name Type Description element NamedTuple The element coordinates. None if not found. Source code in botcity/core/bot.py 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 def find ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" return self . find_until ( label , x = x , y = y , width = width , height = height , threshold = threshold , matching = matching , waiting_time = waiting_time , best = best , grayscale = grayscale ) find_all ( label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , grayscale = False ) Find all elements defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False Returns: Name Type Description elements collections . Iterable [ NamedTuple ] A generator with all element coordinates fount. None if not found. Source code in botcity/core/bot.py 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 def find_all ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , grayscale = False ): \"\"\" Find all elements defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: elements (collections.Iterable[NamedTuple]): A generator with all element coordinates fount. None if not found. \"\"\" def deduplicate ( elems ): def find_same ( item , items ): x_start = item . left x_end = item . left + item . width y_start = item . top y_end = item . top + item . height similars = [] for itm in items : if itm == item : continue if ( itm . left >= x_start and itm . left < x_end ) \\ and ( itm . top >= y_start and itm . top < y_end ): similars . append ( itm ) continue return similars index = 0 while True : try : dups = find_same ( elems [ index ], elems [ index :]) for d in dups : elems . remove ( d ) index += 1 except IndexError : break return elems self . state . element = None screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) element_path = self . _search_image_file ( label ) element_path = self . _image_path_as_image ( element_path ) if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) start_time = time . time () while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return None haystack = self . get_screenshot () eles = cv2find . locate_all_opencv ( element_path , haystack_image = haystack , region = region , confidence = matching , grayscale = grayscale ) if not eles : continue eles = deduplicate ( list ( eles )) for ele in eles : if ele is not None : ele = self . _fix_retina_element ( ele ) self . state . element = ele yield ele break find_app_element ( from_parent_window = None , waiting_time = 10000 , ** selectors ) Find a element of the currently connected application using the available selectors. You can pass the context window where the element is contained. Parameters: Name Type Description Default from_parent_window WindowSpecification The element's parent window. None waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 **selectors Attributes that can be used to filter an element. See more details about the available selectors . {} Returns element (WindowSpecification): The element/control found. Source code in botcity/core/bot.py 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 @if_app_connected def find_app_element ( self , from_parent_window : 'WindowSpecification' = None , waiting_time = 10000 , ** selectors ) -> 'WindowSpecification' : \"\"\" Find a element of the currently connected application using the available selectors. You can pass the context window where the element is contained. Args: from_parent_window (WindowSpecification, optional): The element's parent window. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). **selectors: Attributes that can be used to filter an element. [See more details about the available selectors](https://documentation.botcity.dev). Returns element (WindowSpecification): The element/control found. \"\"\" element = find_element ( self . app , from_parent_window , waiting_time , ** selectors ) return element find_app_window ( waiting_time = 10000 , ** selectors ) Find a window of the currently connected application using the available selectors. Parameters: Name Type Description Default waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 **selectors Attributes that can be used to filter an element. See more details about the available selectors . {} Returns dialog (WindowSpecification): The window or control found. Source code in botcity/core/bot.py 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 @if_app_connected def find_app_window ( self , waiting_time = 10000 , ** selectors ) -> 'WindowSpecification' : \"\"\" Find a window of the currently connected application using the available selectors. Args: waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). **selectors: Attributes that can be used to filter an element. [See more details about the available selectors](https://documentation.botcity.dev). Returns dialog (WindowSpecification): The window or control found. \"\"\" dialog = find_window ( self . app , waiting_time , ** selectors ) return dialog find_multiple ( labels , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ) Find multiple elements defined by label on screen until a timeout happens. Parameters: Name Type Description Default labels list A list of image identifiers required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False Returns: Name Type Description results dict A dictionary in which the key is the label and value are the element coordinates in a NamedTuple. Source code in botcity/core/bot.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 def find_multiple ( self , labels , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ): \"\"\" Find multiple elements defined by label on screen until a timeout happens. Args: labels (list): A list of image identifiers x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: results (dict): A dictionary in which the key is the label and value are the element coordinates in a NamedTuple. \"\"\" def _to_dict ( lbs , elems ): return { k : v for k , v in zip ( lbs , elems )} screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) results = [ None ] * len ( labels ) paths = [ self . _search_image_file ( la ) for la in labels ] paths = [ self . _image_path_as_image ( la ) for la in paths ] if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) if not best : # TODO: Implement best=False. print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) start_time = time . time () n_cpus = multiprocessing . cpu_count () - 1 while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return _to_dict ( labels , results ) haystack = pyautogui . screenshot () helper = functools . partial ( self . _find_multiple_helper , haystack , region , matching , grayscale ) with multiprocessing . Pool ( processes = n_cpus ) as pool : results = pool . map ( helper , paths ) results = [ self . _fix_retina_element ( r ) for r in results ] if None in results : continue else : return _to_dict ( labels , results ) find_text ( label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True ) Find an element defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True Returns: Name Type Description element NamedTuple The element coordinates. None if not found. Source code in botcity/core/bot.py 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 def find_text ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" return self . find_until ( label , x , y , width , height , threshold = threshold , matching = matching , waiting_time = waiting_time , best = best , grayscale = True ) find_until ( label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ) Find an element defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False Returns: Name Type Description element NamedTuple The element coordinates. None if not found. Source code in botcity/core/bot.py 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 def find_until ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" self . state . element = None screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) element_path = self . _search_image_file ( label ) element_path = self . _image_path_as_image ( element_path ) if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) if not best : # TODO: Implement best=False. print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) start_time = time . time () while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return None haystack = self . get_screenshot () it = cv2find . locate_all_opencv ( element_path , haystack_image = haystack , region = region , confidence = matching , grayscale = grayscale ) try : ele = next ( it ) except StopIteration : ele = None if ele is not None : ele = self . _fix_retina_element ( ele ) self . state . element = ele return ele get_clipboard () Get the current content in the clipboard. Returns: Name Type Description text str Current clipboard content Source code in botcity/core/bot.py 1349 1350 1351 1352 1353 1354 1355 1356 def get_clipboard ( self ): \"\"\" Get the current content in the clipboard. Returns: text (str): Current clipboard content \"\"\" return pyperclip . paste () get_element_coords ( label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True ) Find an element defined by label on screen and returns its coordinates. Parameters: Name Type Description Default label str The image identifier required x int X (Left) coordinate of the search area. None y int Y (Top) coordinate of the search area. None width int Width of the search area. None height int Height of the search area. None matching float Minimum score to consider a match in the element image recognition process. Defaults to 0.9. 0.9 best bool Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. True Returns: Name Type Description coords Tuple A tuple containing the x and y coordinates for the element. Source code in botcity/core/bot.py 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 def get_element_coords ( self , label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True ): \"\"\" Find an element defined by label on screen and returns its coordinates. Args: label (str): The image identifier x (int, optional): X (Left) coordinate of the search area. y (int, optional): Y (Top) coordinate of the search area. width (int, optional): Width of the search area. height (int, optional): Height of the search area. matching (float, optional): Minimum score to consider a match in the element image recognition process. Defaults to 0.9. best (bool, optional): Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. Returns: coords (Tuple): A tuple containing the x and y coordinates for the element. \"\"\" self . state . element = None screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 width = width or screen_w height = height or screen_h region = ( x , y , width , height ) if not best : print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) element_path = self . _search_image_file ( label ) element_path = self . _image_path_as_image ( element_path ) haystack = self . get_screenshot () it = cv2find . locate_all_opencv ( element_path , haystack_image = haystack , region = region , confidence = matching , grayscale = False ) try : ele = next ( it ) except StopIteration : ele = None if ele is None : return None , None ele = self . _fix_retina_element ( ele ) self . state . element = ele return ele . left , ele . top get_element_coords_centered ( label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True ) Find an element defined by label on screen and returns its centered coordinates. Parameters: Name Type Description Default label str The image identifier required x int X (Left) coordinate of the search area. None y int Y (Top) coordinate of the search area. None width int Width of the search area. None height int Height of the search area. None matching float Minimum score to consider a match in the element image recognition process. Defaults to 0.9. 0.9 best bool Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. True Returns: Name Type Description coords Tuple A tuple containing the x and y coordinates for the center of the element. Source code in botcity/core/bot.py 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 def get_element_coords_centered ( self , label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True ): \"\"\" Find an element defined by label on screen and returns its centered coordinates. Args: label (str): The image identifier x (int, optional): X (Left) coordinate of the search area. y (int, optional): Y (Top) coordinate of the search area. width (int, optional): Width of the search area. height (int, optional): Height of the search area. matching (float, optional): Minimum score to consider a match in the element image recognition process. Defaults to 0.9. best (bool, optional): Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. Returns: coords (Tuple): A tuple containing the x and y coordinates for the center of the element. \"\"\" self . get_element_coords ( label , x , y , width , height , matching , best ) return self . state . center () get_image_from_map ( label ) Return an image from teh state image map. Parameters: Name Type Description Default label str The image identifier required Returns: Name Type Description Image The Image object Source code in botcity/core/bot.py 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 def get_image_from_map ( self , label ): \"\"\" Return an image from teh state image map. Args: label (str): The image identifier Returns: Image: The Image object \"\"\" path = self . state . map_images . get ( label ) if not path : raise KeyError ( 'Invalid label for image map.' ) img = Image . open ( path ) return img get_last_element () Return the last element found. Returns: Name Type Description element NamedTuple The element coordinates (left, top, width, height) Source code in botcity/core/bot.py 437 438 439 440 441 442 443 444 def get_last_element ( self ): \"\"\" Return the last element found. Returns: element (NamedTuple): The element coordinates (left, top, width, height) \"\"\" return self . state . element get_last_x () Get the last X position for the mouse. Returns: Name Type Description x int The last x position for the mouse. Source code in botcity/core/bot.py 619 620 621 622 623 624 625 626 def get_last_x ( self ): \"\"\" Get the last X position for the mouse. Returns: x (int): The last x position for the mouse. \"\"\" return pyautogui . position () . x get_last_y () Get the last Y position for the mouse. Returns: Name Type Description y int The last y position for the mouse. Source code in botcity/core/bot.py 628 629 630 631 632 633 634 635 def get_last_y ( self ): \"\"\" Get the last Y position for the mouse. Returns: y (int): The last y position for the mouse. \"\"\" return pyautogui . position () . y get_screenshot ( filepath = None , region = None ) Capture a screenshot. Parameters: Name Type Description Default filepath str The filepath in which to save the screenshot. Defaults to None. None region tuple Bounding box containing left, top, width and height to crop screenshot. None Returns: Name Type Description Image The screenshot Image object Source code in botcity/core/bot.py 470 471 472 473 474 475 476 477 478 479 480 481 def get_screenshot ( self , filepath = None , region = None ): \"\"\" Capture a screenshot. Args: filepath (str, optional): The filepath in which to save the screenshot. Defaults to None. region (tuple, optional): Bounding box containing left, top, width and height to crop screenshot. Returns: Image: The screenshot Image object \"\"\" return self . screenshot ( filepath , region ) hold_shift ( wait = 0 ) Hold key Shift Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 def hold_shift ( self , wait = 0 ): \"\"\" Hold key Shift Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . keyDown ( 'shift' ) self . sleep ( wait ) kb_type ( text , interval = 0 ) Type a text char by char (individual key events). Parameters: Name Type Description Default text str text to be typed. required interval int interval (ms) between each key press. Defaults to 0 0 Source code in botcity/core/bot.py 869 870 871 872 873 874 875 876 877 878 879 def kb_type ( self , text , interval = 0 ): \"\"\" Type a text char by char (individual key events). Args: text (str): text to be typed. interval (int, optional): interval (ms) between each key press. Defaults to 0 \"\"\" pyautogui . write ( text , interval = interval / 1000.0 ) self . sleep ( config . DEFAULT_SLEEP_AFTER_ACTION ) key_end ( wait = 0 ) Press key End Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 951 952 953 954 955 956 957 958 959 960 961 def key_end ( self , wait = 0 ): \"\"\" Press key End Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'end' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) key_enter ( wait = 0 ) Press key Enter Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 941 942 943 944 945 946 947 948 949 def key_enter ( self , wait = 0 ): \"\"\" Press key Enter Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . enter ( wait ) key_esc ( wait = 0 ) Press key Esc Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 963 964 965 966 967 968 969 970 971 972 973 def key_esc ( self , wait = 0 ): \"\"\" Press key Esc Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'esc' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) key_right ( wait = 0 ) Press key Right Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 929 930 931 932 933 934 935 936 937 938 939 def key_right ( self , wait = 0 ): \"\"\" Press key Right Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'right' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) maximize_window () Shortcut to maximize window on Windows OS. Source code in botcity/core/bot.py 1054 1055 1056 1057 1058 1059 1060 def maximize_window ( self ): \"\"\" Shortcut to maximize window on Windows OS. \"\"\" self . alt_space () self . sleep ( 1000 ) pyautogui . press ( 'x' ) mouse_down ( wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , button = 'left' ) Holds down the requested mouse button. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION button str One of 'left', 'right', 'middle'. Defaults to 'left' 'left' Source code in botcity/core/bot.py 741 742 743 744 745 746 747 748 749 750 def mouse_down ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , button = 'left' ): \"\"\" Holds down the requested mouse button. Args: wait_after (int, optional): Interval to wait after clicking on the element. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" pyautogui . mouseDown ( button = button ) self . sleep ( wait_after ) mouse_move ( x , y ) Mouse the move to the coordinate defined by x and y Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required Source code in botcity/core/bot.py 637 638 639 640 641 642 643 644 645 646 def mouse_move ( self , x , y ): \"\"\" Mouse the move to the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" pyautogui . moveTo ( x , y ) mouse_up ( wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , button = 'left' ) Releases the requested mouse button. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION button str One of 'left', 'right', 'middle'. Defaults to 'left' 'left' Source code in botcity/core/bot.py 752 753 754 755 756 757 758 759 760 761 def mouse_up ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , button = 'left' ): \"\"\" Releases the requested mouse button. Args: wait_after (int, optional): Interval to wait after clicking on the element. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" pyautogui . mouseUp ( button = button ) self . sleep ( wait_after ) move () Move to the center position of last found item. Source code in botcity/core/bot.py 781 782 783 784 785 786 787 @only_if_element def move ( self ): \"\"\" Move to the center position of last found item. \"\"\" x , y = self . state . center () pyautogui . moveTo ( x , y ) move_random ( range_x , range_y ) Move randomly along the given x, y range. Parameters: Name Type Description Default range_x int Horizontal range required range_y int Vertical range required Source code in botcity/core/bot.py 802 803 804 805 806 807 808 809 810 811 812 813 def move_random ( self , range_x , range_y ): \"\"\" Move randomly along the given x, y range. Args: range_x (int): Horizontal range range_y (int): Vertical range \"\"\" x = int ( random . random () * range_x ) y = int ( random . random () * range_y ) pyautogui . moveTo ( x , y ) move_relative ( x , y ) Move the mouse relative to its current position. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required Source code in botcity/core/bot.py 789 790 791 792 793 794 795 796 797 798 799 800 def move_relative ( self , x , y ): \"\"\" Move the mouse relative to its current position. Args: x (int): Horizontal offset y (int): Vertical offset \"\"\" x = self . get_last_x () + x y = self . get_last_y () + y pyautogui . moveTo ( x , y ) page_down ( wait = 0 ) Press Page Down key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 def page_down ( self , wait = 0 ): \"\"\" Press Page Down key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'pagedown' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) page_up ( wait = 0 ) Press Page Up key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 def page_up ( self , wait = 0 ): \"\"\" Press Page Up key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'pageup' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) paste ( text = None , wait = 0 ) Paste content from the clipboard. Parameters: Name Type Description Default text str The text to be pasted. Defaults to None None wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 881 882 883 884 885 886 887 888 889 890 891 def paste ( self , text = None , wait = 0 ): \"\"\" Paste content from the clipboard. Args: text (str, optional): The text to be pasted. Defaults to None wait (int, optional): Wait interval (ms) after task \"\"\" if text : pyperclip . copy ( text ) self . control_v () release_shift () Release key Shift. This method needs to be invoked after holding Shift or similar. Source code in botcity/core/bot.py 1035 1036 1037 1038 1039 1040 def release_shift ( self ): \"\"\" Release key Shift. This method needs to be invoked after holding Shift or similar. \"\"\" pyautogui . keyUp ( 'shift' ) right_click ( wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 ) Right click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 Source code in botcity/core/bot.py 815 816 817 818 819 820 821 822 823 824 825 826 827 828 @only_if_element def right_click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 ): \"\"\" Right click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. \"\"\" x , y = self . state . center () os_compat . click ( x , y , clicks = clicks , button = 'right' , interval = interval_between_clicks / 1000.0 ) self . sleep ( wait_after ) right_click_at ( x , y ) Right click at the coordinate defined by x and y Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required Source code in botcity/core/bot.py 830 831 832 833 834 835 836 837 838 def right_click_at ( self , x , y ): \"\"\" Right click at the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" os_compat . click ( x , y , button = 'right' ) right_click_relative ( x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ) Right Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION Source code in botcity/core/bot.py 840 841 842 843 844 845 846 847 848 849 850 851 852 @only_if_element def right_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Right Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click_relative ( x , y , wait_after = wait_after , clicks = 3 , interval_between_clicks = interval_between_clicks , button = 'right' ) save_screenshot ( path ) Saves a screenshot in a given path. Parameters: Name Type Description Default path str The filepath in which to save the screenshot required Source code in botcity/core/bot.py 504 505 506 507 508 509 510 511 512 def save_screenshot ( self , path ): \"\"\" Saves a screenshot in a given path. Args: path (str): The filepath in which to save the screenshot \"\"\" pyautogui . screenshot ( path ) screen_cut ( x , y , width = None , height = None ) Capture a screenshot from a region of the screen. Parameters: Name Type Description Default x int region start position x required y int region start position y required width int region width None height int region height None Returns: Name Type Description Image The screenshot Image object Source code in botcity/core/bot.py 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 def screen_cut ( self , x , y , width = None , height = None ): \"\"\" Capture a screenshot from a region of the screen. Args: x (int): region start position x y (int): region start position y width (int): region width height (int): region height Returns: Image: The screenshot Image object \"\"\" screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 width = width or screen_w height = height or screen_h img = pyautogui . screenshot ( region = ( x , y , width , height )) return img screenshot ( filepath = None , region = None ) Capture a screenshot. Parameters: Name Type Description Default filepath str The filepath in which to save the screenshot. Defaults to None. None region tuple Bounding box containing left, top, width and height to crop screenshot. None Returns: Name Type Description Image The screenshot Image object Source code in botcity/core/bot.py 456 457 458 459 460 461 462 463 464 465 466 467 468 def screenshot ( self , filepath = None , region = None ): \"\"\" Capture a screenshot. Args: filepath (str, optional): The filepath in which to save the screenshot. Defaults to None. region (tuple, optional): Bounding box containing left, top, width and height to crop screenshot. Returns: Image: The screenshot Image object \"\"\" img = pyautogui . screenshot ( filepath , region ) return img scroll_down ( clicks ) Scroll Down n clicks Parameters: Name Type Description Default clicks int Number of times to scroll down. required Source code in botcity/core/bot.py 763 764 765 766 767 768 769 770 def scroll_down ( self , clicks ): \"\"\" Scroll Down n clicks Args: clicks (int): Number of times to scroll down. \"\"\" pyautogui . scroll ( - 1 * clicks ) scroll_up ( clicks ) Scroll Up n clicks Parameters: Name Type Description Default clicks int Number of times to scroll up. required Source code in botcity/core/bot.py 772 773 774 775 776 777 778 779 def scroll_up ( self , clicks ): \"\"\" Scroll Up n clicks Args: clicks (int): Number of times to scroll up. \"\"\" pyautogui . scroll ( clicks ) shift_tab ( wait = 0 ) Press keys Shift+Tab Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 def shift_tab ( self , wait = 0 ): \"\"\" Press keys Shift+Tab Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'shift' , 'tab' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) sleep ( interval ) Wait / Sleep for a given interval. Parameters: Name Type Description Default interval int Interval in milliseconds required Source code in botcity/core/bot.py 1526 1527 1528 1529 1530 1531 1532 1533 1534 def sleep ( self , interval ): \"\"\" Wait / Sleep for a given interval. Args: interval (int): Interval in milliseconds \"\"\" self . wait ( interval ) space ( wait = 0 ) Press Space key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 def space ( self , wait = 0 ): \"\"\" Press Space key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'space' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) tab ( wait = 0 ) Press key Tab Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 905 906 907 908 909 910 911 912 913 914 915 def tab ( self , wait = 0 ): \"\"\" Press key Tab Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'tab' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) triple_click ( wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ) Triple Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION Source code in botcity/core/bot.py 717 718 719 720 721 722 723 724 725 @only_if_element def triple_click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Triple Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click ( wait_after = wait_after , clicks = 3 ) triple_click_relative ( x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ) Triple Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION Source code in botcity/core/bot.py 727 728 729 730 731 732 733 734 735 736 737 738 739 @only_if_element def triple_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Triple Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click_relative ( x , y , wait_after = wait_after , clicks = 3 , interval_between_clicks = interval_between_clicks ) type_down ( wait = 0 ) Press Down key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 def type_down ( self , wait = 0 ): \"\"\" Press Down key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'down' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) type_key ( text , interval = 0 ) Type a text char by char (individual key events). Parameters: Name Type Description Default text str text to be typed. required interval int interval (ms) between each key press. Defaults to 0 0 Source code in botcity/core/bot.py 858 859 860 861 862 863 864 865 866 867 def type_key ( self , text , interval = 0 ): \"\"\" Type a text char by char (individual key events). Args: text (str): text to be typed. interval (int, optional): interval (ms) between each key press. Defaults to 0 \"\"\" self . kb_type ( text = text , interval = interval / 1000.0 ) type_keys ( keys ) Press a sequence of keys. Hold the keys in the specific order and releases them. Parameters: Name Type Description Default keys list List of keys to be pressed required Source code in botcity/core/bot.py 1072 1073 1074 1075 1076 1077 1078 1079 def type_keys ( self , keys ): \"\"\" Press a sequence of keys. Hold the keys in the specific order and releases them. Args: keys (list): List of keys to be pressed \"\"\" self . type_keys_with_interval ( 100 , keys ) type_keys_with_interval ( interval , keys ) Press a sequence of keys. Hold the keys in the specific order and releases them. Parameters: Name Type Description Default interval int Interval (ms) in which to press and release keys required keys list List of keys to be pressed required Source code in botcity/core/bot.py 1062 1063 1064 1065 1066 1067 1068 1069 1070 def type_keys_with_interval ( self , interval , keys ): \"\"\" Press a sequence of keys. Hold the keys in the specific order and releases them. Args: interval (int): Interval (ms) in which to press and release keys keys (list): List of keys to be pressed \"\"\" pyautogui . hotkey ( * keys , interval = interval / 1000.0 ) type_left ( wait = 0 ) Press Left key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 def type_left ( self , wait = 0 ): \"\"\" Press Left key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'left' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) type_right ( wait = 0 ) Press Right key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 def type_right ( self , wait = 0 ): \"\"\" Press Right key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'right' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) type_up ( wait = 0 ) Press Up key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 def type_up ( self , wait = 0 ): \"\"\" Press Up key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'up' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) type_windows ( wait = 0 ) Press Win logo key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 def type_windows ( self , wait = 0 ): \"\"\" Press Win logo key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'win' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) wait ( interval ) Wait / Sleep for a given interval. Parameters: Name Type Description Default interval int Interval in milliseconds required Source code in botcity/core/bot.py 1516 1517 1518 1519 1520 1521 1522 1523 1524 def wait ( self , interval ): \"\"\" Wait / Sleep for a given interval. Args: interval (int): Interval in milliseconds \"\"\" time . sleep ( interval / 1000.0 ) wait_for_file ( path , timeout = 10000 ) Invoke the system handler to open the given file. Parameters: Name Type Description Default path str The path for the file to be executed required timeout int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 Returns status (bool): Whether or not the file was available before the timeout Source code in botcity/core/bot.py 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 def wait_for_file ( self , path , timeout = 10000 ): \"\"\" Invoke the system handler to open the given file. Args: path (str): The path for the file to be executed timeout (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). Returns status (bool): Whether or not the file was available before the timeout \"\"\" start_time = time . time () while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > timeout : return False if os . path . isfile ( path ) and os . access ( path , os . R_OK ): return True self . sleep ( config . DEFAULT_SLEEP_AFTER_ACTION )","title":"Framework"},{"location":"bot/#framework","text":"The botcity.core module contains specialized implementations aimed at Desktop automation such as DesktopBot which is described below. You are expected to implement the action method of the DesktopBot class in your Bot class. Here is a very brief example of a bot which opens the BotCity website: from botcity.core import DesktopBot class Bot ( DesktopBot ): def action ( self , execution = None ): # Opens the BotCity website. self . browse ( \"https://botcity.dev\" ) if __name__ == '__main__' : Bot . main ()","title":"Framework"},{"location":"bot/#botcity.core.bot.DesktopBot","text":"Bases: BaseBot Base class for Desktop Bots. Users must implement the action method in their classes. Attributes: Name Type Description state State The internal state of this bot. maestro BotMaestroSDK an instance to interact with the BotMaestro server. Source code in botcity/core/bot.pyclass DesktopBot ( BaseBot ): \"\"\" Base class for Desktop Bots. Users must implement the `action` method in their classes. Attributes: state (State): The internal state of this bot. maestro (BotMaestroSDK): an instance to interact with the BotMaestro server. \"\"\" def __init__ ( self ): super () . __init__ () self . _app = None self . state = State () self . maestro = BotMaestroSDK () if MAESTRO_AVAILABLE else None self . _interval = 0.005 if platform . system () == \"Darwin\" else 0.0 # For parity with Java self . addImage = self . add_image self . getImageFromMap = self . get_image_from_map self . getLastElement = self . get_last_element self . getScreenShot = self . get_screenshot self . screenCut = self . screen_cut self . saveScreenshot = self . save_screenshot self . getCoordinates = self . get_element_coords self . getElementCoords = self . get_element_coords self . getElementCoordsCentered = self . get_element_coords_centered self . find = self . find_until self . findUntil = self . find_until self . findText = self . find_text self . findLastUntil = self . find_until # Java API compatibility self . clickOn = self . click_on self . getLastX = self . get_last_x self . getLastY = self . get_last_y self . mouseMove = self . mouse_move self . clickAt = self . click_at self . doubleclick = self . double_click self . doubleClick = self . double_click self . doubleClickRelative = self . double_click_relative self . tripleClick = self . triple_click self . tripleClickRelative = self . triple_click_relative self . scrollDown = self . scroll_down self . scrollUp = self . scroll_up self . moveTo = self . mouse_move self . moveRelative = self . move_relative self . moveRandom = self . move_random self . moveAndClick = self . click self . rightClick = self . right_click self . rightClickAt = self . right_click_at self . rightClickRelative = self . right_click_relative self . moveAndRightClick = self . right_click pyperclip . determine_clipboard () @property def app ( self ): \"\"\" The connected application instance to be used. Returns: app (Application): The connected Application instance. \"\"\" return self . _app @app . setter def app ( self , app ): \"\"\" The connected application instance to be used. Args: app (Application): The connected application to be used. \"\"\" self . _app = app ########## # Display ########## def add_image ( self , label , path ): \"\"\" Add an image into the state image map. Args: label (str): The image identifier path (str): The path for the image on disk \"\"\" self . state . map_images [ label ] = path def get_image_from_map ( self , label ): \"\"\" Return an image from teh state image map. Args: label (str): The image identifier Returns: Image: The Image object \"\"\" path = self . state . map_images . get ( label ) if not path : raise KeyError ( 'Invalid label for image map.' ) img = Image . open ( path ) return img def find_multiple ( self , labels , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ): \"\"\" Find multiple elements defined by label on screen until a timeout happens. Args: labels (list): A list of image identifiers x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: results (dict): A dictionary in which the key is the label and value are the element coordinates in a NamedTuple. \"\"\" def _to_dict ( lbs , elems ): return { k : v for k , v in zip ( lbs , elems )} screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) results = [ None ] * len ( labels ) paths = [ self . _search_image_file ( la ) for la in labels ] paths = [ self . _image_path_as_image ( la ) for la in paths ] if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) if not best : # TODO: Implement best=False. print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) start_time = time . time () n_cpus = multiprocessing . cpu_count () - 1 while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return _to_dict ( labels , results ) haystack = pyautogui . screenshot () helper = functools . partial ( self . _find_multiple_helper , haystack , region , matching , grayscale ) with multiprocessing . Pool ( processes = n_cpus ) as pool : results = pool . map ( helper , paths ) results = [ self . _fix_retina_element ( r ) for r in results ] if None in results : continue else : return _to_dict ( labels , results ) def _fix_retina_element ( self , ele ): if not is_retina (): return ele if ele is not None : if is_retina (): ele = ele . _replace ( left = ele . left / 2.0 , top = ele . top / 2.0 , width = ele . width / 2.0 , height = ele . height / 2.0 ) return ele def _fix_display_size ( self ): width , height = pyautogui . size () if not is_retina (): return width , height return int ( width * 2 ), int ( height * 2 ) def _find_multiple_helper ( self , haystack , region , confidence , grayscale , needle ): ele = cv2find . locate_all_opencv ( needle , haystack , region = region , confidence = confidence , grayscale = grayscale ) return ele def find ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" return self . find_until ( label , x = x , y = y , width = width , height = height , threshold = threshold , matching = matching , waiting_time = waiting_time , best = best , grayscale = grayscale ) def find_until ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" self . state . element = None screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) element_path = self . _search_image_file ( label ) element_path = self . _image_path_as_image ( element_path ) if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) if not best : # TODO: Implement best=False. print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) start_time = time . time () while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return None haystack = self . get_screenshot () it = cv2find . locate_all_opencv ( element_path , haystack_image = haystack , region = region , confidence = matching , grayscale = grayscale ) try : ele = next ( it ) except StopIteration : ele = None if ele is not None : ele = self . _fix_retina_element ( ele ) self . state . element = ele return ele def find_all ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , grayscale = False ): \"\"\" Find all elements defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: elements (collections.Iterable[NamedTuple]): A generator with all element coordinates fount. None if not found. \"\"\" def deduplicate ( elems ): def find_same ( item , items ): x_start = item . left x_end = item . left + item . width y_start = item . top y_end = item . top + item . height similars = [] for itm in items : if itm == item : continue if ( itm . left >= x_start and itm . left < x_end ) \\ and ( itm . top >= y_start and itm . top < y_end ): similars . append ( itm ) continue return similars index = 0 while True : try : dups = find_same ( elems [ index ], elems [ index :]) for d in dups : elems . remove ( d ) index += 1 except IndexError : break return elems self . state . element = None screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) element_path = self . _search_image_file ( label ) element_path = self . _image_path_as_image ( element_path ) if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) start_time = time . time () while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return None haystack = self . get_screenshot () eles = cv2find . locate_all_opencv ( element_path , haystack_image = haystack , region = region , confidence = matching , grayscale = grayscale ) if not eles : continue eles = deduplicate ( list ( eles )) for ele in eles : if ele is not None : ele = self . _fix_retina_element ( ele ) self . state . element = ele yield ele break def find_text ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" return self . find_until ( label , x , y , width , height , threshold = threshold , matching = matching , waiting_time = waiting_time , best = best , grayscale = True ) def get_last_element ( self ): \"\"\" Return the last element found. Returns: element (NamedTuple): The element coordinates (left, top, width, height) \"\"\" return self . state . element def display_size ( self ): \"\"\" Returns the display size in pixels. Returns: size (Tuple): The screen dimension (width and height) in pixels. \"\"\" width , height = self . _fix_display_size () return width , height def screenshot ( self , filepath = None , region = None ): \"\"\" Capture a screenshot. Args: filepath (str, optional): The filepath in which to save the screenshot. Defaults to None. region (tuple, optional): Bounding box containing left, top, width and height to crop screenshot. Returns: Image: The screenshot Image object \"\"\" img = pyautogui . screenshot ( filepath , region ) return img def get_screenshot ( self , filepath = None , region = None ): \"\"\" Capture a screenshot. Args: filepath (str, optional): The filepath in which to save the screenshot. Defaults to None. region (tuple, optional): Bounding box containing left, top, width and height to crop screenshot. Returns: Image: The screenshot Image object \"\"\" return self . screenshot ( filepath , region ) def screen_cut ( self , x , y , width = None , height = None ): \"\"\" Capture a screenshot from a region of the screen. Args: x (int): region start position x y (int): region start position y width (int): region width height (int): region height Returns: Image: The screenshot Image object \"\"\" screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 width = width or screen_w height = height or screen_h img = pyautogui . screenshot ( region = ( x , y , width , height )) return img def save_screenshot ( self , path ): \"\"\" Saves a screenshot in a given path. Args: path (str): The filepath in which to save the screenshot \"\"\" pyautogui . screenshot ( path ) def get_element_coords ( self , label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True ): \"\"\" Find an element defined by label on screen and returns its coordinates. Args: label (str): The image identifier x (int, optional): X (Left) coordinate of the search area. y (int, optional): Y (Top) coordinate of the search area. width (int, optional): Width of the search area. height (int, optional): Height of the search area. matching (float, optional): Minimum score to consider a match in the element image recognition process. Defaults to 0.9. best (bool, optional): Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. Returns: coords (Tuple): A tuple containing the x and y coordinates for the element. \"\"\" self . state . element = None screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 width = width or screen_w height = height or screen_h region = ( x , y , width , height ) if not best : print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) element_path = self . _search_image_file ( label ) element_path = self . _image_path_as_image ( element_path ) haystack = self . get_screenshot () it = cv2find . locate_all_opencv ( element_path , haystack_image = haystack , region = region , confidence = matching , grayscale = False ) try : ele = next ( it ) except StopIteration : ele = None if ele is None : return None , None ele = self . _fix_retina_element ( ele ) self . state . element = ele return ele . left , ele . top def get_element_coords_centered ( self , label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True ): \"\"\" Find an element defined by label on screen and returns its centered coordinates. Args: label (str): The image identifier x (int, optional): X (Left) coordinate of the search area. y (int, optional): Y (Top) coordinate of the search area. width (int, optional): Width of the search area. height (int, optional): Height of the search area. matching (float, optional): Minimum score to consider a match in the element image recognition process. Defaults to 0.9. best (bool, optional): Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. Returns: coords (Tuple): A tuple containing the x and y coordinates for the center of the element. \"\"\" self . get_element_coords ( label , x , y , width , height , matching , best ) return self . state . center () ######### # Browser ######### def browse ( self , url , location = 0 ): \"\"\" Invoke the default browser passing an URL Args: url (str): The URL to be visited. location (int): If possible, open url in a location determined by new: * 0: the same browser window (the default) * 1: a new browser window * 2: a new browser page (\"tab\") Returns: bool: Whether or not the request was successful \"\"\" status = webbrowser . open ( url , location ) return status ####### # Mouse ####### def click_on ( self , label ): \"\"\" Click on the element. Args: label (str): The image identifier \"\"\" x , y = self . get_element_coords_centered ( label ) if None in ( x , y ): raise ValueError ( f 'Element not available. Cannot find { label } .' ) os_compat . click ( x , y ) def get_last_x ( self ): \"\"\" Get the last X position for the mouse. Returns: x (int): The last x position for the mouse. \"\"\" return pyautogui . position () . x def get_last_y ( self ): \"\"\" Get the last Y position for the mouse. Returns: y (int): The last y position for the mouse. \"\"\" return pyautogui . position () . y def mouse_move ( self , x , y ): \"\"\" Mouse the move to the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" pyautogui . moveTo ( x , y ) def click_at ( self , x , y ): \"\"\" Click at the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" os_compat . click ( x , y ) @only_if_element def click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ): \"\"\" Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" x , y = self . state . center () os_compat . click ( x , y , clicks = clicks , button = button , interval = interval_between_clicks / 1000.0 ) self . sleep ( wait_after ) @only_if_element def click_relative ( self , x , y , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ): \"\"\" Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" x = self . state . x () + x y = self . state . y () + y os_compat . click ( x , y , clicks = clicks , button = button , interval = interval_between_clicks / 1000.0 ) self . sleep ( wait_after ) @only_if_element def double_click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Double Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click ( wait_after = wait_after , clicks = 2 ) @only_if_element def double_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Double Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click_relative ( x , y , wait_after = wait_after , clicks = 2 , interval_between_clicks = interval_between_clicks ) @only_if_element def triple_click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Triple Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click ( wait_after = wait_after , clicks = 3 ) @only_if_element def triple_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Triple Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click_relative ( x , y , wait_after = wait_after , clicks = 3 , interval_between_clicks = interval_between_clicks ) def mouse_down ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , button = 'left' ): \"\"\" Holds down the requested mouse button. Args: wait_after (int, optional): Interval to wait after clicking on the element. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" pyautogui . mouseDown ( button = button ) self . sleep ( wait_after ) def mouse_up ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , button = 'left' ): \"\"\" Releases the requested mouse button. Args: wait_after (int, optional): Interval to wait after clicking on the element. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" pyautogui . mouseUp ( button = button ) self . sleep ( wait_after ) def scroll_down ( self , clicks ): \"\"\" Scroll Down n clicks Args: clicks (int): Number of times to scroll down. \"\"\" pyautogui . scroll ( - 1 * clicks ) def scroll_up ( self , clicks ): \"\"\" Scroll Up n clicks Args: clicks (int): Number of times to scroll up. \"\"\" pyautogui . scroll ( clicks ) @only_if_element def move ( self ): \"\"\" Move to the center position of last found item. \"\"\" x , y = self . state . center () pyautogui . moveTo ( x , y ) def move_relative ( self , x , y ): \"\"\" Move the mouse relative to its current position. Args: x (int): Horizontal offset y (int): Vertical offset \"\"\" x = self . get_last_x () + x y = self . get_last_y () + y pyautogui . moveTo ( x , y ) def move_random ( self , range_x , range_y ): \"\"\" Move randomly along the given x, y range. Args: range_x (int): Horizontal range range_y (int): Vertical range \"\"\" x = int ( random . random () * range_x ) y = int ( random . random () * range_y ) pyautogui . moveTo ( x , y ) @only_if_element def right_click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 ): \"\"\" Right click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. \"\"\" x , y = self . state . center () os_compat . click ( x , y , clicks = clicks , button = 'right' , interval = interval_between_clicks / 1000.0 ) self . sleep ( wait_after ) def right_click_at ( self , x , y ): \"\"\" Right click at the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" os_compat . click ( x , y , button = 'right' ) @only_if_element def right_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Right Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click_relative ( x , y , wait_after = wait_after , clicks = 3 , interval_between_clicks = interval_between_clicks , button = 'right' ) ########## # Keyboard ########## def type_key ( self , text , interval = 0 ): \"\"\" Type a text char by char (individual key events). Args: text (str): text to be typed. interval (int, optional): interval (ms) between each key press. Defaults to 0 \"\"\" self . kb_type ( text = text , interval = interval / 1000.0 ) def kb_type ( self , text , interval = 0 ): \"\"\" Type a text char by char (individual key events). Args: text (str): text to be typed. interval (int, optional): interval (ms) between each key press. Defaults to 0 \"\"\" pyautogui . write ( text , interval = interval / 1000.0 ) self . sleep ( config . DEFAULT_SLEEP_AFTER_ACTION ) def paste ( self , text = None , wait = 0 ): \"\"\" Paste content from the clipboard. Args: text (str, optional): The text to be pasted. Defaults to None wait (int, optional): Wait interval (ms) after task \"\"\" if text : pyperclip . copy ( text ) self . control_v () def copy_to_clipboard ( self , text , wait = 0 ): \"\"\" Copy content to the clipboard. Args: text (str): The text to be copied. wait (int, optional): Wait interval (ms) after task \"\"\" pyperclip . copy ( text ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def tab ( self , wait = 0 ): \"\"\" Press key Tab Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'tab' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def enter ( self , wait = 0 ): \"\"\" Press key Enter Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'enter' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def key_right ( self , wait = 0 ): \"\"\" Press key Right Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'right' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def key_enter ( self , wait = 0 ): \"\"\" Press key Enter Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . enter ( wait ) def key_end ( self , wait = 0 ): \"\"\" Press key End Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'end' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def key_esc ( self , wait = 0 ): \"\"\" Press key Esc Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'esc' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def _key_fx ( self , idx , wait = 0 ): \"\"\" Press key F[idx] where idx is a value from 1 to 12 Args: idx (int): F key index from 1 to 12 wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( f 'f { idx } ' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def key_f1 ( self , wait = 0 ): self . _key_fx ( 1 , wait = wait ) def key_f2 ( self , wait = 0 ): self . _key_fx ( 2 , wait = wait ) def key_f3 ( self , wait = 0 ): self . _key_fx ( 3 , wait = wait ) def key_f4 ( self , wait = 0 ): self . _key_fx ( 4 , wait = wait ) def key_f5 ( self , wait = 0 ): self . _key_fx ( 5 , wait = wait ) def key_f6 ( self , wait = 0 ): self . _key_fx ( 6 , wait = wait ) def key_f7 ( self , wait = 0 ): self . _key_fx ( 7 , wait = wait ) def key_f8 ( self , wait = 0 ): self . _key_fx ( 8 , wait = wait ) def key_f9 ( self , wait = 0 ): self . _key_fx ( 9 , wait = wait ) def key_f10 ( self , wait = 0 ): self . _key_fx ( 10 , wait = wait ) def key_f11 ( self , wait = 0 ): self . _key_fx ( 11 , wait = wait ) def key_f12 ( self , wait = 0 ): self . _key_fx ( 12 , wait = wait ) def hold_shift ( self , wait = 0 ): \"\"\" Hold key Shift Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . keyDown ( 'shift' ) self . sleep ( wait ) def release_shift ( self ): \"\"\" Release key Shift. This method needs to be invoked after holding Shift or similar. \"\"\" pyautogui . keyUp ( 'shift' ) def alt_space ( self , wait = 0 ): \"\"\" Press keys Alt+Space Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'space' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def maximize_window ( self ): \"\"\" Shortcut to maximize window on Windows OS. \"\"\" self . alt_space () self . sleep ( 1000 ) pyautogui . press ( 'x' ) def type_keys_with_interval ( self , interval , keys ): \"\"\" Press a sequence of keys. Hold the keys in the specific order and releases them. Args: interval (int): Interval (ms) in which to press and release keys keys (list): List of keys to be pressed \"\"\" pyautogui . hotkey ( * keys , interval = interval / 1000.0 ) def type_keys ( self , keys ): \"\"\" Press a sequence of keys. Hold the keys in the specific order and releases them. Args: keys (list): List of keys to be pressed \"\"\" self . type_keys_with_interval ( 100 , keys ) def alt_e ( self , wait = 0 ): \"\"\" Press keys Alt+E Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'e' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def alt_r ( self , wait = 0 ): \"\"\" Press keys Alt+R Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'r' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def alt_f ( self , wait = 0 ): \"\"\" Press keys Alt+F Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'f' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def alt_u ( self , wait = 0 ): \"\"\" Press keys Alt+U Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'u' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def alt_f4 ( self , wait = 0 ): \"\"\" Press keys Alt+F4 Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'f4' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_c ( self , wait = 0 ): \"\"\" Press keys CTRL+C Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'c' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) return self . get_clipboard () def control_v ( self , wait = 0 ): \"\"\" Press keys CTRL+V Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'v' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_a ( self , wait = 0 ): \"\"\" Press keys CTRL+A Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'a' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_f ( self , wait = 0 ): \"\"\" Press keys CTRL+F Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'f' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_p ( self , wait = 0 ): \"\"\" Press keys CTRL+P Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'p' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_u ( self , wait = 0 ): \"\"\" Press keys CTRL+U Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'u' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_r ( self , wait = 0 ): \"\"\" Press keys CTRL+R Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'r' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_t ( self , wait = 0 ): \"\"\" Press keys CTRL+T Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 't' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_end ( self , wait = 0 ): \"\"\" Press keys CTRL+End Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'end' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_home ( self , wait = 0 ): \"\"\" Press keys CTRL+Home Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'home' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_w ( self , wait = 0 ): \"\"\" Press keys CTRL+W Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'w' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_shift_p ( self , wait = 0 ): \"\"\" Press keys CTRL+Shift+P Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'shift' , 'p' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def control_shift_j ( self , wait = 0 ): \"\"\" Press keys CTRL+Shift+J Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'shift' , 'j' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def shift_tab ( self , wait = 0 ): \"\"\" Press keys Shift+Tab Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'shift' , 'tab' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def get_clipboard ( self ): \"\"\" Get the current content in the clipboard. Returns: text (str): Current clipboard content \"\"\" return pyperclip . paste () def type_left ( self , wait = 0 ): \"\"\" Press Left key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'left' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def type_right ( self , wait = 0 ): \"\"\" Press Right key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'right' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def type_down ( self , wait = 0 ): \"\"\" Press Down key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'down' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def type_up ( self , wait = 0 ): \"\"\" Press Up key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'up' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def type_windows ( self , wait = 0 ): \"\"\" Press Win logo key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'win' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def page_up ( self , wait = 0 ): \"\"\" Press Page Up key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'pageup' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def page_down ( self , wait = 0 ): \"\"\" Press Page Down key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'pagedown' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def space ( self , wait = 0 ): \"\"\" Press Space key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'space' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def backspace ( self , wait = 0 ): \"\"\" Press Backspace key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'backspace' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) def delete ( self , wait = 0 ): \"\"\" Press Delete key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'delete' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) ###### # Misc ###### def wait_for_file ( self , path , timeout = 10000 ): \"\"\" Invoke the system handler to open the given file. Args: path (str): The path for the file to be executed timeout (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). Returns status (bool): Whether or not the file was available before the timeout \"\"\" start_time = time . time () while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > timeout : return False if os . path . isfile ( path ) and os . access ( path , os . R_OK ): return True self . sleep ( config . DEFAULT_SLEEP_AFTER_ACTION ) def execute ( self , file_path ): \"\"\" Invoke the system handler to open the given file. Args: file_path (str): The path for the file to be executed \"\"\" if platform . system () == \"Windows\" : os . startfile ( file_path ) else : subprocess . Popen ( file_path . split ( \" \" )) def wait ( self , interval ): \"\"\" Wait / Sleep for a given interval. Args: interval (int): Interval in milliseconds \"\"\" time . sleep ( interval / 1000.0 ) def sleep ( self , interval ): \"\"\" Wait / Sleep for a given interval. Args: interval (int): Interval in milliseconds \"\"\" self . wait ( interval ) ############# # Application ############# @if_windows_os def connect_to_app ( self , backend = Backend . WIN_32 , timeout = 60000 , ** connection_selectors ) -> 'Application' : \"\"\" Connects to an instance of an open application. Use this method to be able to access application windows and elements. Args: backend (Backend, optional): The accessibility technology defined in the Backend class that could be used for your application. Defaults to Backend.WIN_32 ('win32'). timeout (int, optional): Maximum wait time (ms) to wait for connection. Defaults to 60000ms (60s). **connection_selectors: Attributes that can be used to connect to an application. [See more details about the available selectors](https://documentation.botcity.dev). Returns app (Application): The Application instance. \"\"\" self . app = connect ( backend , timeout , ** connection_selectors ) return self . app @if_app_connected def find_app_window ( self , waiting_time = 10000 , ** selectors ) -> 'WindowSpecification' : \"\"\" Find a window of the currently connected application using the available selectors. Args: waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). **selectors: Attributes that can be used to filter an element. [See more details about the available selectors](https://documentation.botcity.dev). Returns dialog (WindowSpecification): The window or control found. \"\"\" dialog = find_window ( self . app , waiting_time , ** selectors ) return dialog @if_app_connected def find_app_element ( self , from_parent_window : 'WindowSpecification' = None , waiting_time = 10000 , ** selectors ) -> 'WindowSpecification' : \"\"\" Find a element of the currently connected application using the available selectors. You can pass the context window where the element is contained. Args: from_parent_window (WindowSpecification, optional): The element's parent window. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). **selectors: Attributes that can be used to filter an element. [See more details about the available selectors](https://documentation.botcity.dev). Returns element (WindowSpecification): The element/control found. \"\"\" element = find_element ( self . app , from_parent_window , waiting_time , ** selectors ) return element","title":"DesktopBot"},{"location":"bot/#botcity.core.bot.DesktopBot.add_image","text":"Add an image into the state image map. Parameters: Name Type Description Default label str The image identifier required path str The path for the image on disk required Source code in botcity/core/bot.py 112 113 114 115 116 117 118 119 120 def add_image ( self , label , path ): \"\"\" Add an image into the state image map. Args: label (str): The image identifier path (str): The path for the image on disk \"\"\" self . state . map_images [ label ] = path","title":"add_image()"},{"location":"bot/#botcity.core.bot.DesktopBot.alt_e","text":"Press keys Alt+E Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 def alt_e ( self , wait = 0 ): \"\"\" Press keys Alt+E Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'e' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"alt_e()"},{"location":"bot/#botcity.core.bot.DesktopBot.alt_f","text":"Press keys Alt+F Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 def alt_f ( self , wait = 0 ): \"\"\" Press keys Alt+F Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'f' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"alt_f()"},{"location":"bot/#botcity.core.bot.DesktopBot.alt_f4","text":"Press keys Alt+F4 Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 def alt_f4 ( self , wait = 0 ): \"\"\" Press keys Alt+F4 Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'f4' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"alt_f4()"},{"location":"bot/#botcity.core.bot.DesktopBot.alt_r","text":"Press keys Alt+R Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 def alt_r ( self , wait = 0 ): \"\"\" Press keys Alt+R Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'r' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"alt_r()"},{"location":"bot/#botcity.core.bot.DesktopBot.alt_space","text":"Press keys Alt+Space Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 def alt_space ( self , wait = 0 ): \"\"\" Press keys Alt+Space Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'space' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"alt_space()"},{"location":"bot/#botcity.core.bot.DesktopBot.alt_u","text":"Press keys Alt+U Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 def alt_u ( self , wait = 0 ): \"\"\" Press keys Alt+U Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'alt' , 'u' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"alt_u()"},{"location":"bot/#botcity.core.bot.DesktopBot.app","text":"The connected application instance to be used. Returns: Name Type Description app Application The connected Application instance. Source code in botcity/core/bot.py 88 89 90 91 92 93 94 95 96 @property def app ( self ): \"\"\" The connected application instance to be used. Returns: app (Application): The connected Application instance. \"\"\" return self . _app","title":"app()"},{"location":"bot/#botcity.core.bot.DesktopBot.backspace","text":"Press Backspace key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 def backspace ( self , wait = 0 ): \"\"\" Press Backspace key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'backspace' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"backspace()"},{"location":"bot/#botcity.core.bot.DesktopBot.browse","text":"Invoke the default browser passing an URL Parameters: Name Type Description Default url str The URL to be visited. required location int If possible, open url in a location determined by new: * 0: the same browser window (the default) * 1: a new browser window * 2: a new browser page (\"tab\") 0 Returns: Name Type Description bool Whether or not the request was successful Source code in botcity/core/bot.py 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 def browse ( self , url , location = 0 ): \"\"\" Invoke the default browser passing an URL Args: url (str): The URL to be visited. location (int): If possible, open url in a location determined by new: * 0: the same browser window (the default) * 1: a new browser window * 2: a new browser page (\"tab\") Returns: bool: Whether or not the request was successful \"\"\" status = webbrowser . open ( url , location ) return status","title":"browse()"},{"location":"bot/#botcity.core.bot.DesktopBot.click","text":"Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 button str One of 'left', 'right', 'middle'. Defaults to 'left' 'left' Source code in botcity/core/bot.py 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 @only_if_element def click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ): \"\"\" Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" x , y = self . state . center () os_compat . click ( x , y , clicks = clicks , button = button , interval = interval_between_clicks / 1000.0 ) self . sleep ( wait_after )","title":"click()"},{"location":"bot/#botcity.core.bot.DesktopBot.click_at","text":"Click at the coordinate defined by x and y Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required Source code in botcity/core/bot.py 648 649 650 651 652 653 654 655 656 def click_at ( self , x , y ): \"\"\" Click at the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" os_compat . click ( x , y )","title":"click_at()"},{"location":"bot/#botcity.core.bot.DesktopBot.click_on","text":"Click on the element. Parameters: Name Type Description Default label str The image identifier required Source code in botcity/core/bot.py 607 608 609 610 611 612 613 614 615 616 617 def click_on ( self , label ): \"\"\" Click on the element. Args: label (str): The image identifier \"\"\" x , y = self . get_element_coords_centered ( label ) if None in ( x , y ): raise ValueError ( f 'Element not available. Cannot find { label } .' ) os_compat . click ( x , y )","title":"click_on()"},{"location":"bot/#botcity.core.bot.DesktopBot.click_relative","text":"Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 button str One of 'left', 'right', 'middle'. Defaults to 'left' 'left' Source code in botcity/core/bot.py 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 @only_if_element def click_relative ( self , x , y , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ): \"\"\" Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" x = self . state . x () + x y = self . state . y () + y os_compat . click ( x , y , clicks = clicks , button = button , interval = interval_between_clicks / 1000.0 ) self . sleep ( wait_after )","title":"click_relative()"},{"location":"bot/#botcity.core.bot.DesktopBot.connect_to_app","text":"Connects to an instance of an open application. Use this method to be able to access application windows and elements. Parameters: Name Type Description Default backend Backend The accessibility technology defined in the Backend class that could be used for your application. Defaults to Backend.WIN_32 ('win32'). Backend.WIN_32 timeout int Maximum wait time (ms) to wait for connection. Defaults to 60000ms (60s). 60000 **connection_selectors Attributes that can be used to connect to an application. See more details about the available selectors . {} Returns app (Application): The Application instance. Source code in botcity/core/bot.py 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 @if_windows_os def connect_to_app ( self , backend = Backend . WIN_32 , timeout = 60000 , ** connection_selectors ) -> 'Application' : \"\"\" Connects to an instance of an open application. Use this method to be able to access application windows and elements. Args: backend (Backend, optional): The accessibility technology defined in the Backend class that could be used for your application. Defaults to Backend.WIN_32 ('win32'). timeout (int, optional): Maximum wait time (ms) to wait for connection. Defaults to 60000ms (60s). **connection_selectors: Attributes that can be used to connect to an application. [See more details about the available selectors](https://documentation.botcity.dev). Returns app (Application): The Application instance. \"\"\" self . app = connect ( backend , timeout , ** connection_selectors ) return self . app","title":"connect_to_app()"},{"location":"bot/#botcity.core.bot.DesktopBot.control_a","text":"Press keys CTRL+A Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 def control_a ( self , wait = 0 ): \"\"\" Press keys CTRL+A Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'a' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"control_a()"},{"location":"bot/#botcity.core.bot.DesktopBot.control_c","text":"Press keys CTRL+C Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 def control_c ( self , wait = 0 ): \"\"\" Press keys CTRL+C Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'c' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) return self . get_clipboard ()","title":"control_c()"},{"location":"bot/#botcity.core.bot.DesktopBot.control_end","text":"Press keys CTRL+End Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 def control_end ( self , wait = 0 ): \"\"\" Press keys CTRL+End Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'end' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"control_end()"},{"location":"bot/#botcity.core.bot.DesktopBot.control_f","text":"Press keys CTRL+F Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 def control_f ( self , wait = 0 ): \"\"\" Press keys CTRL+F Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'f' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"control_f()"},{"location":"bot/#botcity.core.bot.DesktopBot.control_home","text":"Press keys CTRL+Home Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 def control_home ( self , wait = 0 ): \"\"\" Press keys CTRL+Home Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'home' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"control_home()"},{"location":"bot/#botcity.core.bot.DesktopBot.control_p","text":"Press keys CTRL+P Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 def control_p ( self , wait = 0 ): \"\"\" Press keys CTRL+P Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'p' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"control_p()"},{"location":"bot/#botcity.core.bot.DesktopBot.control_r","text":"Press keys CTRL+R Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 def control_r ( self , wait = 0 ): \"\"\" Press keys CTRL+R Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'r' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"control_r()"},{"location":"bot/#botcity.core.bot.DesktopBot.control_shift_j","text":"Press keys CTRL+Shift+J Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 def control_shift_j ( self , wait = 0 ): \"\"\" Press keys CTRL+Shift+J Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'shift' , 'j' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"control_shift_j()"},{"location":"bot/#botcity.core.bot.DesktopBot.control_shift_p","text":"Press keys CTRL+Shift+P Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 def control_shift_p ( self , wait = 0 ): \"\"\" Press keys CTRL+Shift+P Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'shift' , 'p' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"control_shift_p()"},{"location":"bot/#botcity.core.bot.DesktopBot.control_t","text":"Press keys CTRL+T Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 def control_t ( self , wait = 0 ): \"\"\" Press keys CTRL+T Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 't' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"control_t()"},{"location":"bot/#botcity.core.bot.DesktopBot.control_u","text":"Press keys CTRL+U Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 def control_u ( self , wait = 0 ): \"\"\" Press keys CTRL+U Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'u' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"control_u()"},{"location":"bot/#botcity.core.bot.DesktopBot.control_v","text":"Press keys CTRL+V Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 def control_v ( self , wait = 0 ): \"\"\" Press keys CTRL+V Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'v' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"control_v()"},{"location":"bot/#botcity.core.bot.DesktopBot.control_w","text":"Press keys CTRL+W Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 def control_w ( self , wait = 0 ): \"\"\" Press keys CTRL+W Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' pyautogui . hotkey ( key , 'w' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"control_w()"},{"location":"bot/#botcity.core.bot.DesktopBot.copy_to_clipboard","text":"Copy content to the clipboard. Parameters: Name Type Description Default text str The text to be copied. required wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 893 894 895 896 897 898 899 900 901 902 903 def copy_to_clipboard ( self , text , wait = 0 ): \"\"\" Copy content to the clipboard. Args: text (str): The text to be copied. wait (int, optional): Wait interval (ms) after task \"\"\" pyperclip . copy ( text ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"copy_to_clipboard()"},{"location":"bot/#botcity.core.bot.DesktopBot.delete","text":"Press Delete key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 def delete ( self , wait = 0 ): \"\"\" Press Delete key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'delete' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"delete()"},{"location":"bot/#botcity.core.bot.DesktopBot.display_size","text":"Returns the display size in pixels. Returns: Name Type Description size Tuple The screen dimension (width and height) in pixels. Source code in botcity/core/bot.py 446 447 448 449 450 451 452 453 454 def display_size ( self ): \"\"\" Returns the display size in pixels. Returns: size (Tuple): The screen dimension (width and height) in pixels. \"\"\" width , height = self . _fix_display_size () return width , height","title":"display_size()"},{"location":"bot/#botcity.core.bot.DesktopBot.double_click","text":"Double Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION Source code in botcity/core/bot.py 693 694 695 696 697 698 699 700 701 @only_if_element def double_click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Double Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click ( wait_after = wait_after , clicks = 2 )","title":"double_click()"},{"location":"bot/#botcity.core.bot.DesktopBot.double_click_relative","text":"Double Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION Source code in botcity/core/bot.py 703 704 705 706 707 708 709 710 711 712 713 714 715 @only_if_element def double_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Double Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click_relative ( x , y , wait_after = wait_after , clicks = 2 , interval_between_clicks = interval_between_clicks )","title":"double_click_relative()"},{"location":"bot/#botcity.core.bot.DesktopBot.enter","text":"Press key Enter Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 917 918 919 920 921 922 923 924 925 926 927 def enter ( self , wait = 0 ): \"\"\" Press key Enter Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'enter' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"enter()"},{"location":"bot/#botcity.core.bot.DesktopBot.execute","text":"Invoke the system handler to open the given file. Parameters: Name Type Description Default file_path str The path for the file to be executed required Source code in botcity/core/bot.py 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 def execute ( self , file_path ): \"\"\" Invoke the system handler to open the given file. Args: file_path (str): The path for the file to be executed \"\"\" if platform . system () == \"Windows\" : os . startfile ( file_path ) else : subprocess . Popen ( file_path . split ( \" \" ))","title":"execute()"},{"location":"bot/#botcity.core.bot.DesktopBot.find","text":"Find an element defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False Returns: Name Type Description element NamedTuple The element coordinates. None if not found. Source code in botcity/core/bot.py 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 def find ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" return self . find_until ( label , x = x , y = y , width = width , height = height , threshold = threshold , matching = matching , waiting_time = waiting_time , best = best , grayscale = grayscale )","title":"find()"},{"location":"bot/#botcity.core.bot.DesktopBot.find_all","text":"Find all elements defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False Returns: Name Type Description elements collections . Iterable [ NamedTuple ] A generator with all element coordinates fount. None if not found. Source code in botcity/core/bot.py 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 def find_all ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , grayscale = False ): \"\"\" Find all elements defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: elements (collections.Iterable[NamedTuple]): A generator with all element coordinates fount. None if not found. \"\"\" def deduplicate ( elems ): def find_same ( item , items ): x_start = item . left x_end = item . left + item . width y_start = item . top y_end = item . top + item . height similars = [] for itm in items : if itm == item : continue if ( itm . left >= x_start and itm . left < x_end ) \\ and ( itm . top >= y_start and itm . top < y_end ): similars . append ( itm ) continue return similars index = 0 while True : try : dups = find_same ( elems [ index ], elems [ index :]) for d in dups : elems . remove ( d ) index += 1 except IndexError : break return elems self . state . element = None screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) element_path = self . _search_image_file ( label ) element_path = self . _image_path_as_image ( element_path ) if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) start_time = time . time () while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return None haystack = self . get_screenshot () eles = cv2find . locate_all_opencv ( element_path , haystack_image = haystack , region = region , confidence = matching , grayscale = grayscale ) if not eles : continue eles = deduplicate ( list ( eles )) for ele in eles : if ele is not None : ele = self . _fix_retina_element ( ele ) self . state . element = ele yield ele break","title":"find_all()"},{"location":"bot/#botcity.core.bot.DesktopBot.find_app_element","text":"Find a element of the currently connected application using the available selectors. You can pass the context window where the element is contained. Parameters: Name Type Description Default from_parent_window WindowSpecification The element's parent window. None waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 **selectors Attributes that can be used to filter an element. See more details about the available selectors . {} Returns element (WindowSpecification): The element/control found. Source code in botcity/core/bot.py 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 @if_app_connected def find_app_element ( self , from_parent_window : 'WindowSpecification' = None , waiting_time = 10000 , ** selectors ) -> 'WindowSpecification' : \"\"\" Find a element of the currently connected application using the available selectors. You can pass the context window where the element is contained. Args: from_parent_window (WindowSpecification, optional): The element's parent window. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). **selectors: Attributes that can be used to filter an element. [See more details about the available selectors](https://documentation.botcity.dev). Returns element (WindowSpecification): The element/control found. \"\"\" element = find_element ( self . app , from_parent_window , waiting_time , ** selectors ) return element","title":"find_app_element()"},{"location":"bot/#botcity.core.bot.DesktopBot.find_app_window","text":"Find a window of the currently connected application using the available selectors. Parameters: Name Type Description Default waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 **selectors Attributes that can be used to filter an element. See more details about the available selectors . {} Returns dialog (WindowSpecification): The window or control found. Source code in botcity/core/bot.py 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 @if_app_connected def find_app_window ( self , waiting_time = 10000 , ** selectors ) -> 'WindowSpecification' : \"\"\" Find a window of the currently connected application using the available selectors. Args: waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). **selectors: Attributes that can be used to filter an element. [See more details about the available selectors](https://documentation.botcity.dev). Returns dialog (WindowSpecification): The window or control found. \"\"\" dialog = find_window ( self . app , waiting_time , ** selectors ) return dialog","title":"find_app_window()"},{"location":"bot/#botcity.core.bot.DesktopBot.find_multiple","text":"Find multiple elements defined by label on screen until a timeout happens. Parameters: Name Type Description Default labels list A list of image identifiers required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False Returns: Name Type Description results dict A dictionary in which the key is the label and value are the element coordinates in a NamedTuple. Source code in botcity/core/bot.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 def find_multiple ( self , labels , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ): \"\"\" Find multiple elements defined by label on screen until a timeout happens. Args: labels (list): A list of image identifiers x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: results (dict): A dictionary in which the key is the label and value are the element coordinates in a NamedTuple. \"\"\" def _to_dict ( lbs , elems ): return { k : v for k , v in zip ( lbs , elems )} screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) results = [ None ] * len ( labels ) paths = [ self . _search_image_file ( la ) for la in labels ] paths = [ self . _image_path_as_image ( la ) for la in paths ] if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) if not best : # TODO: Implement best=False. print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) start_time = time . time () n_cpus = multiprocessing . cpu_count () - 1 while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return _to_dict ( labels , results ) haystack = pyautogui . screenshot () helper = functools . partial ( self . _find_multiple_helper , haystack , region , matching , grayscale ) with multiprocessing . Pool ( processes = n_cpus ) as pool : results = pool . map ( helper , paths ) results = [ self . _fix_retina_element ( r ) for r in results ] if None in results : continue else : return _to_dict ( labels , results )","title":"find_multiple()"},{"location":"bot/#botcity.core.bot.DesktopBot.find_text","text":"Find an element defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True Returns: Name Type Description element NamedTuple The element coordinates. None if not found. Source code in botcity/core/bot.py 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 def find_text ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" return self . find_until ( label , x , y , width , height , threshold = threshold , matching = matching , waiting_time = waiting_time , best = best , grayscale = True )","title":"find_text()"},{"location":"bot/#botcity.core.bot.DesktopBot.find_until","text":"Find an element defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False Returns: Name Type Description element NamedTuple The element coordinates. None if not found. Source code in botcity/core/bot.py 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 def find_until ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" self . state . element = None screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) element_path = self . _search_image_file ( label ) element_path = self . _image_path_as_image ( element_path ) if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) if not best : # TODO: Implement best=False. print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) start_time = time . time () while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return None haystack = self . get_screenshot () it = cv2find . locate_all_opencv ( element_path , haystack_image = haystack , region = region , confidence = matching , grayscale = grayscale ) try : ele = next ( it ) except StopIteration : ele = None if ele is not None : ele = self . _fix_retina_element ( ele ) self . state . element = ele return ele","title":"find_until()"},{"location":"bot/#botcity.core.bot.DesktopBot.get_clipboard","text":"Get the current content in the clipboard. Returns: Name Type Description text str Current clipboard content Source code in botcity/core/bot.py 1349 1350 1351 1352 1353 1354 1355 1356 def get_clipboard ( self ): \"\"\" Get the current content in the clipboard. Returns: text (str): Current clipboard content \"\"\" return pyperclip . paste ()","title":"get_clipboard()"},{"location":"bot/#botcity.core.bot.DesktopBot.get_element_coords","text":"Find an element defined by label on screen and returns its coordinates. Parameters: Name Type Description Default label str The image identifier required x int X (Left) coordinate of the search area. None y int Y (Top) coordinate of the search area. None width int Width of the search area. None height int Height of the search area. None matching float Minimum score to consider a match in the element image recognition process. Defaults to 0.9. 0.9 best bool Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. True Returns: Name Type Description coords Tuple A tuple containing the x and y coordinates for the element. Source code in botcity/core/bot.py 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 def get_element_coords ( self , label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True ): \"\"\" Find an element defined by label on screen and returns its coordinates. Args: label (str): The image identifier x (int, optional): X (Left) coordinate of the search area. y (int, optional): Y (Top) coordinate of the search area. width (int, optional): Width of the search area. height (int, optional): Height of the search area. matching (float, optional): Minimum score to consider a match in the element image recognition process. Defaults to 0.9. best (bool, optional): Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. Returns: coords (Tuple): A tuple containing the x and y coordinates for the element. \"\"\" self . state . element = None screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 width = width or screen_w height = height or screen_h region = ( x , y , width , height ) if not best : print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) element_path = self . _search_image_file ( label ) element_path = self . _image_path_as_image ( element_path ) haystack = self . get_screenshot () it = cv2find . locate_all_opencv ( element_path , haystack_image = haystack , region = region , confidence = matching , grayscale = False ) try : ele = next ( it ) except StopIteration : ele = None if ele is None : return None , None ele = self . _fix_retina_element ( ele ) self . state . element = ele return ele . left , ele . top","title":"get_element_coords()"},{"location":"bot/#botcity.core.bot.DesktopBot.get_element_coords_centered","text":"Find an element defined by label on screen and returns its centered coordinates. Parameters: Name Type Description Default label str The image identifier required x int X (Left) coordinate of the search area. None y int Y (Top) coordinate of the search area. None width int Width of the search area. None height int Height of the search area. None matching float Minimum score to consider a match in the element image recognition process. Defaults to 0.9. 0.9 best bool Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. True Returns: Name Type Description coords Tuple A tuple containing the x and y coordinates for the center of the element. Source code in botcity/core/bot.py 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 def get_element_coords_centered ( self , label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True ): \"\"\" Find an element defined by label on screen and returns its centered coordinates. Args: label (str): The image identifier x (int, optional): X (Left) coordinate of the search area. y (int, optional): Y (Top) coordinate of the search area. width (int, optional): Width of the search area. height (int, optional): Height of the search area. matching (float, optional): Minimum score to consider a match in the element image recognition process. Defaults to 0.9. best (bool, optional): Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. Returns: coords (Tuple): A tuple containing the x and y coordinates for the center of the element. \"\"\" self . get_element_coords ( label , x , y , width , height , matching , best ) return self . state . center ()","title":"get_element_coords_centered()"},{"location":"bot/#botcity.core.bot.DesktopBot.get_image_from_map","text":"Return an image from teh state image map. Parameters: Name Type Description Default label str The image identifier required Returns: Name Type Description Image The Image object Source code in botcity/core/bot.py 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 def get_image_from_map ( self , label ): \"\"\" Return an image from teh state image map. Args: label (str): The image identifier Returns: Image: The Image object \"\"\" path = self . state . map_images . get ( label ) if not path : raise KeyError ( 'Invalid label for image map.' ) img = Image . open ( path ) return img","title":"get_image_from_map()"},{"location":"bot/#botcity.core.bot.DesktopBot.get_last_element","text":"Return the last element found. Returns: Name Type Description element NamedTuple The element coordinates (left, top, width, height) Source code in botcity/core/bot.py 437 438 439 440 441 442 443 444 def get_last_element ( self ): \"\"\" Return the last element found. Returns: element (NamedTuple): The element coordinates (left, top, width, height) \"\"\" return self . state . element","title":"get_last_element()"},{"location":"bot/#botcity.core.bot.DesktopBot.get_last_x","text":"Get the last X position for the mouse. Returns: Name Type Description x int The last x position for the mouse. Source code in botcity/core/bot.py 619 620 621 622 623 624 625 626 def get_last_x ( self ): \"\"\" Get the last X position for the mouse. Returns: x (int): The last x position for the mouse. \"\"\" return pyautogui . position () . x","title":"get_last_x()"},{"location":"bot/#botcity.core.bot.DesktopBot.get_last_y","text":"Get the last Y position for the mouse. Returns: Name Type Description y int The last y position for the mouse. Source code in botcity/core/bot.py 628 629 630 631 632 633 634 635 def get_last_y ( self ): \"\"\" Get the last Y position for the mouse. Returns: y (int): The last y position for the mouse. \"\"\" return pyautogui . position () . y","title":"get_last_y()"},{"location":"bot/#botcity.core.bot.DesktopBot.get_screenshot","text":"Capture a screenshot. Parameters: Name Type Description Default filepath str The filepath in which to save the screenshot. Defaults to None. None region tuple Bounding box containing left, top, width and height to crop screenshot. None Returns: Name Type Description Image The screenshot Image object Source code in botcity/core/bot.py 470 471 472 473 474 475 476 477 478 479 480 481 def get_screenshot ( self , filepath = None , region = None ): \"\"\" Capture a screenshot. Args: filepath (str, optional): The filepath in which to save the screenshot. Defaults to None. region (tuple, optional): Bounding box containing left, top, width and height to crop screenshot. Returns: Image: The screenshot Image object \"\"\" return self . screenshot ( filepath , region )","title":"get_screenshot()"},{"location":"bot/#botcity.core.bot.DesktopBot.hold_shift","text":"Hold key Shift Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 def hold_shift ( self , wait = 0 ): \"\"\" Hold key Shift Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . keyDown ( 'shift' ) self . sleep ( wait )","title":"hold_shift()"},{"location":"bot/#botcity.core.bot.DesktopBot.kb_type","text":"Type a text char by char (individual key events). Parameters: Name Type Description Default text str text to be typed. required interval int interval (ms) between each key press. Defaults to 0 0 Source code in botcity/core/bot.py 869 870 871 872 873 874 875 876 877 878 879 def kb_type ( self , text , interval = 0 ): \"\"\" Type a text char by char (individual key events). Args: text (str): text to be typed. interval (int, optional): interval (ms) between each key press. Defaults to 0 \"\"\" pyautogui . write ( text , interval = interval / 1000.0 ) self . sleep ( config . DEFAULT_SLEEP_AFTER_ACTION )","title":"kb_type()"},{"location":"bot/#botcity.core.bot.DesktopBot.key_end","text":"Press key End Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 951 952 953 954 955 956 957 958 959 960 961 def key_end ( self , wait = 0 ): \"\"\" Press key End Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'end' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"key_end()"},{"location":"bot/#botcity.core.bot.DesktopBot.key_enter","text":"Press key Enter Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 941 942 943 944 945 946 947 948 949 def key_enter ( self , wait = 0 ): \"\"\" Press key Enter Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . enter ( wait )","title":"key_enter()"},{"location":"bot/#botcity.core.bot.DesktopBot.key_esc","text":"Press key Esc Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 963 964 965 966 967 968 969 970 971 972 973 def key_esc ( self , wait = 0 ): \"\"\" Press key Esc Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'esc' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"key_esc()"},{"location":"bot/#botcity.core.bot.DesktopBot.key_right","text":"Press key Right Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 929 930 931 932 933 934 935 936 937 938 939 def key_right ( self , wait = 0 ): \"\"\" Press key Right Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'right' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"key_right()"},{"location":"bot/#botcity.core.bot.DesktopBot.maximize_window","text":"Shortcut to maximize window on Windows OS. Source code in botcity/core/bot.py 1054 1055 1056 1057 1058 1059 1060 def maximize_window ( self ): \"\"\" Shortcut to maximize window on Windows OS. \"\"\" self . alt_space () self . sleep ( 1000 ) pyautogui . press ( 'x' )","title":"maximize_window()"},{"location":"bot/#botcity.core.bot.DesktopBot.mouse_down","text":"Holds down the requested mouse button. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION button str One of 'left', 'right', 'middle'. Defaults to 'left' 'left' Source code in botcity/core/bot.py 741 742 743 744 745 746 747 748 749 750 def mouse_down ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , button = 'left' ): \"\"\" Holds down the requested mouse button. Args: wait_after (int, optional): Interval to wait after clicking on the element. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" pyautogui . mouseDown ( button = button ) self . sleep ( wait_after )","title":"mouse_down()"},{"location":"bot/#botcity.core.bot.DesktopBot.mouse_move","text":"Mouse the move to the coordinate defined by x and y Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required Source code in botcity/core/bot.py 637 638 639 640 641 642 643 644 645 646 def mouse_move ( self , x , y ): \"\"\" Mouse the move to the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" pyautogui . moveTo ( x , y )","title":"mouse_move()"},{"location":"bot/#botcity.core.bot.DesktopBot.mouse_up","text":"Releases the requested mouse button. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION button str One of 'left', 'right', 'middle'. Defaults to 'left' 'left' Source code in botcity/core/bot.py 752 753 754 755 756 757 758 759 760 761 def mouse_up ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , button = 'left' ): \"\"\" Releases the requested mouse button. Args: wait_after (int, optional): Interval to wait after clicking on the element. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" pyautogui . mouseUp ( button = button ) self . sleep ( wait_after )","title":"mouse_up()"},{"location":"bot/#botcity.core.bot.DesktopBot.move","text":"Move to the center position of last found item. Source code in botcity/core/bot.py 781 782 783 784 785 786 787 @only_if_element def move ( self ): \"\"\" Move to the center position of last found item. \"\"\" x , y = self . state . center () pyautogui . moveTo ( x , y )","title":"move()"},{"location":"bot/#botcity.core.bot.DesktopBot.move_random","text":"Move randomly along the given x, y range. Parameters: Name Type Description Default range_x int Horizontal range required range_y int Vertical range required Source code in botcity/core/bot.py 802 803 804 805 806 807 808 809 810 811 812 813 def move_random ( self , range_x , range_y ): \"\"\" Move randomly along the given x, y range. Args: range_x (int): Horizontal range range_y (int): Vertical range \"\"\" x = int ( random . random () * range_x ) y = int ( random . random () * range_y ) pyautogui . moveTo ( x , y )","title":"move_random()"},{"location":"bot/#botcity.core.bot.DesktopBot.move_relative","text":"Move the mouse relative to its current position. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required Source code in botcity/core/bot.py 789 790 791 792 793 794 795 796 797 798 799 800 def move_relative ( self , x , y ): \"\"\" Move the mouse relative to its current position. Args: x (int): Horizontal offset y (int): Vertical offset \"\"\" x = self . get_last_x () + x y = self . get_last_y () + y pyautogui . moveTo ( x , y )","title":"move_relative()"},{"location":"bot/#botcity.core.bot.DesktopBot.page_down","text":"Press Page Down key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 def page_down ( self , wait = 0 ): \"\"\" Press Page Down key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'pagedown' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"page_down()"},{"location":"bot/#botcity.core.bot.DesktopBot.page_up","text":"Press Page Up key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 def page_up ( self , wait = 0 ): \"\"\" Press Page Up key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'pageup' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"page_up()"},{"location":"bot/#botcity.core.bot.DesktopBot.paste","text":"Paste content from the clipboard. Parameters: Name Type Description Default text str The text to be pasted. Defaults to None None wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 881 882 883 884 885 886 887 888 889 890 891 def paste ( self , text = None , wait = 0 ): \"\"\" Paste content from the clipboard. Args: text (str, optional): The text to be pasted. Defaults to None wait (int, optional): Wait interval (ms) after task \"\"\" if text : pyperclip . copy ( text ) self . control_v ()","title":"paste()"},{"location":"bot/#botcity.core.bot.DesktopBot.release_shift","text":"Release key Shift. This method needs to be invoked after holding Shift or similar. Source code in botcity/core/bot.py 1035 1036 1037 1038 1039 1040 def release_shift ( self ): \"\"\" Release key Shift. This method needs to be invoked after holding Shift or similar. \"\"\" pyautogui . keyUp ( 'shift' )","title":"release_shift()"},{"location":"bot/#botcity.core.bot.DesktopBot.right_click","text":"Right click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 Source code in botcity/core/bot.py 815 816 817 818 819 820 821 822 823 824 825 826 827 828 @only_if_element def right_click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 ): \"\"\" Right click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. \"\"\" x , y = self . state . center () os_compat . click ( x , y , clicks = clicks , button = 'right' , interval = interval_between_clicks / 1000.0 ) self . sleep ( wait_after )","title":"right_click()"},{"location":"bot/#botcity.core.bot.DesktopBot.right_click_at","text":"Right click at the coordinate defined by x and y Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required Source code in botcity/core/bot.py 830 831 832 833 834 835 836 837 838 def right_click_at ( self , x , y ): \"\"\" Right click at the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" os_compat . click ( x , y , button = 'right' )","title":"right_click_at()"},{"location":"bot/#botcity.core.bot.DesktopBot.right_click_relative","text":"Right Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION Source code in botcity/core/bot.py 840 841 842 843 844 845 846 847 848 849 850 851 852 @only_if_element def right_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Right Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click_relative ( x , y , wait_after = wait_after , clicks = 3 , interval_between_clicks = interval_between_clicks , button = 'right' )","title":"right_click_relative()"},{"location":"bot/#botcity.core.bot.DesktopBot.save_screenshot","text":"Saves a screenshot in a given path. Parameters: Name Type Description Default path str The filepath in which to save the screenshot required Source code in botcity/core/bot.py 504 505 506 507 508 509 510 511 512 def save_screenshot ( self , path ): \"\"\" Saves a screenshot in a given path. Args: path (str): The filepath in which to save the screenshot \"\"\" pyautogui . screenshot ( path )","title":"save_screenshot()"},{"location":"bot/#botcity.core.bot.DesktopBot.screen_cut","text":"Capture a screenshot from a region of the screen. Parameters: Name Type Description Default x int region start position x required y int region start position y required width int region width None height int region height None Returns: Name Type Description Image The screenshot Image object Source code in botcity/core/bot.py 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 def screen_cut ( self , x , y , width = None , height = None ): \"\"\" Capture a screenshot from a region of the screen. Args: x (int): region start position x y (int): region start position y width (int): region width height (int): region height Returns: Image: The screenshot Image object \"\"\" screen_w , screen_h = self . _fix_display_size () x = x or 0 y = y or 0 width = width or screen_w height = height or screen_h img = pyautogui . screenshot ( region = ( x , y , width , height )) return img","title":"screen_cut()"},{"location":"bot/#botcity.core.bot.DesktopBot.screenshot","text":"Capture a screenshot. Parameters: Name Type Description Default filepath str The filepath in which to save the screenshot. Defaults to None. None region tuple Bounding box containing left, top, width and height to crop screenshot. None Returns: Name Type Description Image The screenshot Image object Source code in botcity/core/bot.py 456 457 458 459 460 461 462 463 464 465 466 467 468 def screenshot ( self , filepath = None , region = None ): \"\"\" Capture a screenshot. Args: filepath (str, optional): The filepath in which to save the screenshot. Defaults to None. region (tuple, optional): Bounding box containing left, top, width and height to crop screenshot. Returns: Image: The screenshot Image object \"\"\" img = pyautogui . screenshot ( filepath , region ) return img","title":"screenshot()"},{"location":"bot/#botcity.core.bot.DesktopBot.scroll_down","text":"Scroll Down n clicks Parameters: Name Type Description Default clicks int Number of times to scroll down. required Source code in botcity/core/bot.py 763 764 765 766 767 768 769 770 def scroll_down ( self , clicks ): \"\"\" Scroll Down n clicks Args: clicks (int): Number of times to scroll down. \"\"\" pyautogui . scroll ( - 1 * clicks )","title":"scroll_down()"},{"location":"bot/#botcity.core.bot.DesktopBot.scroll_up","text":"Scroll Up n clicks Parameters: Name Type Description Default clicks int Number of times to scroll up. required Source code in botcity/core/bot.py 772 773 774 775 776 777 778 779 def scroll_up ( self , clicks ): \"\"\" Scroll Up n clicks Args: clicks (int): Number of times to scroll up. \"\"\" pyautogui . scroll ( clicks )","title":"scroll_up()"},{"location":"bot/#botcity.core.bot.DesktopBot.shift_tab","text":"Press keys Shift+Tab Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 def shift_tab ( self , wait = 0 ): \"\"\" Press keys Shift+Tab Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . hotkey ( 'shift' , 'tab' , interval = self . _interval ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"shift_tab()"},{"location":"bot/#botcity.core.bot.DesktopBot.sleep","text":"Wait / Sleep for a given interval. Parameters: Name Type Description Default interval int Interval in milliseconds required Source code in botcity/core/bot.py 1526 1527 1528 1529 1530 1531 1532 1533 1534 def sleep ( self , interval ): \"\"\" Wait / Sleep for a given interval. Args: interval (int): Interval in milliseconds \"\"\" self . wait ( interval )","title":"sleep()"},{"location":"bot/#botcity.core.bot.DesktopBot.space","text":"Press Space key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 def space ( self , wait = 0 ): \"\"\" Press Space key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'space' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"space()"},{"location":"bot/#botcity.core.bot.DesktopBot.tab","text":"Press key Tab Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 905 906 907 908 909 910 911 912 913 914 915 def tab ( self , wait = 0 ): \"\"\" Press key Tab Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'tab' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"tab()"},{"location":"bot/#botcity.core.bot.DesktopBot.triple_click","text":"Triple Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION Source code in botcity/core/bot.py 717 718 719 720 721 722 723 724 725 @only_if_element def triple_click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Triple Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click ( wait_after = wait_after , clicks = 3 )","title":"triple_click()"},{"location":"bot/#botcity.core.bot.DesktopBot.triple_click_relative","text":"Triple Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 wait_after int Interval to wait after clicking on the element. config.DEFAULT_SLEEP_AFTER_ACTION Source code in botcity/core/bot.py 727 728 729 730 731 732 733 734 735 736 737 738 739 @only_if_element def triple_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Triple Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" self . click_relative ( x , y , wait_after = wait_after , clicks = 3 , interval_between_clicks = interval_between_clicks )","title":"triple_click_relative()"},{"location":"bot/#botcity.core.bot.DesktopBot.type_down","text":"Press Down key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 def type_down ( self , wait = 0 ): \"\"\" Press Down key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'down' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"type_down()"},{"location":"bot/#botcity.core.bot.DesktopBot.type_key","text":"Type a text char by char (individual key events). Parameters: Name Type Description Default text str text to be typed. required interval int interval (ms) between each key press. Defaults to 0 0 Source code in botcity/core/bot.py 858 859 860 861 862 863 864 865 866 867 def type_key ( self , text , interval = 0 ): \"\"\" Type a text char by char (individual key events). Args: text (str): text to be typed. interval (int, optional): interval (ms) between each key press. Defaults to 0 \"\"\" self . kb_type ( text = text , interval = interval / 1000.0 )","title":"type_key()"},{"location":"bot/#botcity.core.bot.DesktopBot.type_keys","text":"Press a sequence of keys. Hold the keys in the specific order and releases them. Parameters: Name Type Description Default keys list List of keys to be pressed required Source code in botcity/core/bot.py 1072 1073 1074 1075 1076 1077 1078 1079 def type_keys ( self , keys ): \"\"\" Press a sequence of keys. Hold the keys in the specific order and releases them. Args: keys (list): List of keys to be pressed \"\"\" self . type_keys_with_interval ( 100 , keys )","title":"type_keys()"},{"location":"bot/#botcity.core.bot.DesktopBot.type_keys_with_interval","text":"Press a sequence of keys. Hold the keys in the specific order and releases them. Parameters: Name Type Description Default interval int Interval (ms) in which to press and release keys required keys list List of keys to be pressed required Source code in botcity/core/bot.py 1062 1063 1064 1065 1066 1067 1068 1069 1070 def type_keys_with_interval ( self , interval , keys ): \"\"\" Press a sequence of keys. Hold the keys in the specific order and releases them. Args: interval (int): Interval (ms) in which to press and release keys keys (list): List of keys to be pressed \"\"\" pyautogui . hotkey ( * keys , interval = interval / 1000.0 )","title":"type_keys_with_interval()"},{"location":"bot/#botcity.core.bot.DesktopBot.type_left","text":"Press Left key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 def type_left ( self , wait = 0 ): \"\"\" Press Left key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'left' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"type_left()"},{"location":"bot/#botcity.core.bot.DesktopBot.type_right","text":"Press Right key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 def type_right ( self , wait = 0 ): \"\"\" Press Right key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'right' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"type_right()"},{"location":"bot/#botcity.core.bot.DesktopBot.type_up","text":"Press Up key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 def type_up ( self , wait = 0 ): \"\"\" Press Up key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'up' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"type_up()"},{"location":"bot/#botcity.core.bot.DesktopBot.type_windows","text":"Press Win logo key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in botcity/core/bot.py 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 def type_windows ( self , wait = 0 ): \"\"\" Press Win logo key Args: wait (int, optional): Wait interval (ms) after task \"\"\" pyautogui . press ( 'win' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"type_windows()"},{"location":"bot/#botcity.core.bot.DesktopBot.wait","text":"Wait / Sleep for a given interval. Parameters: Name Type Description Default interval int Interval in milliseconds required Source code in botcity/core/bot.py 1516 1517 1518 1519 1520 1521 1522 1523 1524 def wait ( self , interval ): \"\"\" Wait / Sleep for a given interval. Args: interval (int): Interval in milliseconds \"\"\" time . sleep ( interval / 1000.0 )","title":"wait()"},{"location":"bot/#botcity.core.bot.DesktopBot.wait_for_file","text":"Invoke the system handler to open the given file. Parameters: Name Type Description Default path str The path for the file to be executed required timeout int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 Returns status (bool): Whether or not the file was available before the timeout Source code in botcity/core/bot.py 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 def wait_for_file ( self , path , timeout = 10000 ): \"\"\" Invoke the system handler to open the given file. Args: path (str): The path for the file to be executed timeout (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). Returns status (bool): Whether or not the file was available before the timeout \"\"\" start_time = time . time () while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > timeout : return False if os . path . isfile ( path ) and os . access ( path , os . R_OK ): return True self . sleep ( config . DEFAULT_SLEEP_AFTER_ACTION )","title":"wait_for_file()"},{"location":"intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions to build your RPA pipeline. from botcity.core import DesktopBot As a demonstration of the library, let's build a simple bot together that will open BotCity's website in your browser. Opening the browser To open the browser you can leverage the browser method which takes as argument a URL. bot = DesktopBot () bot . browser ( \"https://www.botcity.dev/en\" ) You can use this framework in two ways: Scripting using the functions Creating a Bot class The second method is the best if you plan to integrate your bot with the BotCity Maestro SDK. The template project uses the Bot class and the examples cover both approaches. Template Project We created a template project using Cookiecutter to help you create new bots using BotCity's Python Framework. Take a look into the template project website for more information on how to use it and get started. Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions to build your RPA pipeline. from botcity.core import DesktopBot As a demonstration of the library, let's build a simple bot together that will open BotCity's website in your browser.","title":"Getting Started"},{"location":"intro/#opening-the-browser","text":"To open the browser you can leverage the browser method which takes as argument a URL. bot = DesktopBot () bot . browser ( \"https://www.botcity.dev/en\" ) You can use this framework in two ways: Scripting using the functions Creating a Bot class The second method is the best if you plan to integrate your bot with the BotCity Maestro SDK. The template project uses the Bot class and the examples cover both approaches.","title":"Opening the browser"},{"location":"intro/#template-project","text":"We created a template project using Cookiecutter to help you create new bots using BotCity's Python Framework. Take a look into the template project website for more information on how to use it and get started.","title":"Template Project"},{"location":"intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"}]}